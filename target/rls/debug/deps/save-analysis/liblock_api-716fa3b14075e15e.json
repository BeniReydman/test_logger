{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1","program":"C:\\Users\\Beni\\.rustup\\toolchains\\stable-i686-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","lock_api","C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=716fa3b14075e15e","-C","extra-filename=-716fa3b14075e15e","--out-dir","c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps","--extern","scopeguard=c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps\\libscopeguard-f3c74cd642d41c8d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Beni\\.rustup/toolchains/stable-i686-pc-windows-msvc"],"output":"c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps\\liblock_api-716fa3b14075e15e.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[16471060131445902322,10907645298118286217]},"crate_root":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src","external_crates":[{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[6764811272097449003,13681722573116367099]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9485826678459717252,15756974541460141494]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[15954912595519161470,12922162993496933985]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[5817666571418040635,9298999605435454000]}}],"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","byte_start":333,"byte_end":4040,"line_start":8,"line_end":109,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","byte_start":3914,"byte_end":3915,"line_start":100,"line_end":100,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","byte_start":3914,"byte_end":3915,"line_start":100,"line_end":100,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","byte_start":3914,"byte_end":3915,"line_start":100,"line_end":100,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","byte_start":333,"byte_end":4040,"line_start":8,"line_end":109,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":880}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","byte_start":3558,"byte_end":3568,"line_start":88,"line_end":88,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","byte_start":3569,"byte_end":3591,"line_start":89,"line_end":89,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","byte_start":3592,"byte_end":3618,"line_start":90,"line_end":90,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","byte_start":3797,"byte_end":3806,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\lib.rs","byte_start":3902,"byte_end":3913,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":4986,"byte_end":4994,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":5297,"byte_end":5301,"line_start":34,"line_end":34,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":5238,"byte_end":5286,"line_start":33,"line_end":33,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":5466,"byte_end":5477,"line_start":38,"line_end":38,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":5571,"byte_end":5575,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"fn (&self) -> ()","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":5733,"byte_end":5741,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"fn (&self) -> bool","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":6271,"byte_end":6277,"line_start":58,"line_end":58,"column_start":15,"column_end":21},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"fn (&self) -> ()","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Unlocks this mutex.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":6362,"byte_end":6371,"line_start":62,"line_end":62,"column_start":8,"column_end":17},"name":"is_locked","qualname":"::mutex::RawMutex::is_locked","value":"fn (&self) -> bool","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":6345,"byte_end":6354,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":7019,"byte_end":7031,"line_start":80,"line_end":80,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":7341,"byte_end":7352,"line_start":89,"line_end":89,"column_start":15,"column_end":26},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":7878,"byte_end":7882,"line_start":103,"line_end":103,"column_start":15,"column_end":19},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"fn (&self) -> ()","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":8180,"byte_end":8193,"line_start":113,"line_end":113,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":8262,"byte_end":8270,"line_start":115,"line_end":115,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":8330,"byte_end":8337,"line_start":118,"line_end":118,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":8413,"byte_end":8425,"line_start":121,"line_end":121,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":8541,"byte_end":8555,"line_start":124,"line_end":124,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":9109,"byte_end":9114,"line_start":135,"line_end":135,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":9736,"byte_end":9739,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"fn (val: T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":9678,"byte_end":9710,"line_start":155,"line_end":155,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":9715,"byte_end":9724,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":9949,"byte_end":9959,"line_start":166,"line_end":166,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":9928,"byte_end":9937,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":10215,"byte_end":10224,"line_start":176,"line_end":176,"column_start":18,"column_end":27},"name":"const_new","qualname":"<Mutex<R, T>>::const_new","value":"fn (raw_mutex: R, val: T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex based on a pre-existing raw mutex.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":10188,"byte_end":10197,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":11196,"byte_end":11200,"line_start":206,"line_end":206,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"fn (&self) -> MutexGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":11175,"byte_end":11184,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":11654,"byte_end":11662,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"fn (&self) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":11633,"byte_end":11642,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":12135,"byte_end":12142,"line_start":234,"line_end":234,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":12114,"byte_end":12123,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":12293,"byte_end":12302,"line_start":240,"line_end":240,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<Mutex<R, T>>::is_locked","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":12272,"byte_end":12281,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":12868,"byte_end":12880,"line_start":256,"line_end":256,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":12840,"byte_end":12849,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":13317,"byte_end":13320,"line_start":270,"line_end":270,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":13289,"byte_end":13298,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":13890,"byte_end":13898,"line_start":286,"line_end":286,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<Mutex<R, T>>::data_ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":13869,"byte_end":13878,"line_start":285,"line_end":285,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":14539,"byte_end":14556,"line_start":304,"line_end":304,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":14511,"byte_end":14520,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":14956,"byte_end":14968,"line_start":316,"line_end":316,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":14935,"byte_end":14944,"line_start":315,"line_end":315,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":15524,"byte_end":15538,"line_start":331,"line_end":331,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":15503,"byte_end":15512,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":17746,"byte_end":17756,"line_start":410,"line_end":410,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":17675,"byte_end":17734,"line_start":409,"line_end":409,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":18107,"byte_end":18112,"line_start":419,"line_end":419,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"fn (s: &Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":18577,"byte_end":18580,"line_start":432,"line_end":432,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedMutexGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":18556,"byte_end":18565,"line_start":431,"line_end":431,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":19415,"byte_end":19422,"line_start":456,"line_end":456,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedMutexGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":19394,"byte_end":19403,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":20103,"byte_end":20111,"line_start":478,"line_end":478,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":20082,"byte_end":20091,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":21213,"byte_end":21224,"line_start":505,"line_end":505,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":21192,"byte_end":21201,"line_start":504,"line_end":504,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":21686,"byte_end":21699,"line_start":520,"line_end":520,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":21665,"byte_end":21674,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":22250,"byte_end":22254,"line_start":538,"line_end":538,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":22229,"byte_end":22238,"line_start":537,"line_end":537,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":23972,"byte_end":23988,"line_start":594,"line_end":594,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":23901,"byte_end":23960,"line_start":593,"line_end":593,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":24816,"byte_end":24819,"line_start":619,"line_end":619,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedMutexGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":24795,"byte_end":24804,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":25647,"byte_end":25654,"line_start":643,"line_end":643,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedMutexGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":25626,"byte_end":25635,"line_start":642,"line_end":642,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":26949,"byte_end":26960,"line_start":675,"line_end":675,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":26928,"byte_end":26937,"line_start":674,"line_end":674,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":29421,"byte_end":29432,"line_start":38,"line_end":38,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":29713,"byte_end":29717,"line_start":43,"line_end":43,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":29654,"byte_end":29702,"line_start":42,"line_end":42,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":29828,"byte_end":29845,"line_start":47,"line_end":47,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"fn (&self) -> NonZeroUsize","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":30413,"byte_end":30430,"line_start":60,"line_end":60,"column_start":12,"column_end":29},"name":"RawReentrantMutex","qualname":"::remutex::RawReentrantMutex","value":"RawReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234}],"decl_id":null,"docs":" A raw mutex type that wraps another raw mutex to provide reentrancy.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":30886,"byte_end":30890,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"name":"INIT","qualname":"::remutex::RawReentrantMutex::<R, G>::INIT","value":"Self","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":30823,"byte_end":30871,"line_start":72,"line_end":72,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":31826,"byte_end":31830,"line_start":103,"line_end":103,"column_start":12,"column_end":16},"name":"lock","qualname":"<RawReentrantMutex<R, G>>::lock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking if it's held by another thread.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":31805,"byte_end":31814,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":32105,"byte_end":32113,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<RawReentrantMutex<R, G>>::try_lock","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":32084,"byte_end":32093,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":32472,"byte_end":32478,"line_start":124,"line_end":124,"column_start":19,"column_end":25},"name":"unlock","qualname":"<RawReentrantMutex<R, G>>::unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks this mutex. The inner mutex may not be unlocked if\n this mutex was acquired previously in the current thread.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":32444,"byte_end":32453,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":32791,"byte_end":32800,"line_start":135,"line_end":135,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<RawReentrantMutex<R, G>>::is_locked","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":32770,"byte_end":32779,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":33240,"byte_end":33251,"line_start":149,"line_end":149,"column_start":19,"column_end":30},"name":"unlock_fair","qualname":"<RawReentrantMutex<R, G>>::unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol. The inner mutex\n may not be unlocked if this mutex was acquired previously in the\n current thread.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":33212,"byte_end":33221,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":33914,"byte_end":33918,"line_start":168,"line_end":168,"column_start":19,"column_end":23},"name":"bump","qualname":"<RawReentrantMutex<R, G>>::bump","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":33886,"byte_end":33895,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":34336,"byte_end":34350,"line_start":181,"line_end":181,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<RawReentrantMutex<R, G>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":34315,"byte_end":34324,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":34553,"byte_end":34565,"line_start":187,"line_end":187,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<RawReentrantMutex<R, G>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":34532,"byte_end":34541,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":35153,"byte_end":35167,"line_start":203,"line_end":203,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":36147,"byte_end":36150,"line_start":236,"line_end":236,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"fn (val: T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":36089,"byte_end":36121,"line_start":234,"line_end":234,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":36126,"byte_end":36135,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":36565,"byte_end":36575,"line_start":250,"line_end":250,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":36544,"byte_end":36553,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":36916,"byte_end":36925,"line_start":262,"line_end":262,"column_start":18,"column_end":27},"name":"const_new","qualname":"<ReentrantMutex<R, G, T>>::const_new","value":"fn (raw_mutex: R, get_thread_id: G, val: T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex based on a pre-existing raw mutex and a\n helper to get the thread ID.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":36889,"byte_end":36898,"line_start":261,"line_end":261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":38264,"byte_end":38268,"line_start":298,"line_end":298,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"fn (&self) -> ReentrantMutexGuard<'_, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":38243,"byte_end":38252,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":38734,"byte_end":38742,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"fn (&self) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":38713,"byte_end":38722,"line_start":311,"line_end":311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":39236,"byte_end":39243,"line_start":326,"line_end":326,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":39215,"byte_end":39224,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":39394,"byte_end":39403,"line_start":332,"line_end":332,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<ReentrantMutex<R, G, T>>::is_locked","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":39373,"byte_end":39382,"line_start":331,"line_end":331,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":39987,"byte_end":39999,"line_start":348,"line_end":348,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":39959,"byte_end":39968,"line_start":347,"line_end":347,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":40445,"byte_end":40448,"line_start":362,"line_end":362,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":40417,"byte_end":40426,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":41050,"byte_end":41058,"line_start":379,"line_end":379,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<ReentrantMutex<R, G, T>>::data_ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":41029,"byte_end":41038,"line_start":378,"line_end":378,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":41745,"byte_end":41762,"line_start":397,"line_end":397,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":41717,"byte_end":41726,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":42190,"byte_end":42202,"line_start":409,"line_end":409,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":42169,"byte_end":42178,"line_start":408,"line_end":408,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":42770,"byte_end":42784,"line_start":424,"line_end":424,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":42749,"byte_end":42758,"line_start":423,"line_end":423,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":45281,"byte_end":45300,"line_start":508,"line_end":508,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":45201,"byte_end":45269,"line_start":507,"line_end":507,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":45761,"byte_end":45768,"line_start":520,"line_end":520,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"fn (s: &Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":46274,"byte_end":46277,"line_start":533,"line_end":533,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedReentrantMutexGuard<'a, R, G, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":46253,"byte_end":46262,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":47147,"byte_end":47154,"line_start":557,"line_end":557,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedReentrantMutexGuard<'a, R, G, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":47126,"byte_end":47135,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":47883,"byte_end":47891,"line_start":582,"line_end":582,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":47862,"byte_end":47871,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":49052,"byte_end":49063,"line_start":611,"line_end":611,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":49031,"byte_end":49040,"line_start":610,"line_end":610,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":49529,"byte_end":49542,"line_start":626,"line_end":626,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":49508,"byte_end":49517,"line_start":625,"line_end":625,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":50105,"byte_end":50109,"line_start":644,"line_end":644,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":50084,"byte_end":50093,"line_start":643,"line_end":643,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":51883,"byte_end":51908,"line_start":704,"line_end":704,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":51803,"byte_end":51871,"line_start":703,"line_end":703,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":52755,"byte_end":52758,"line_start":727,"line_end":727,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedReentrantMutexGuard<'a, R, G, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":52734,"byte_end":52743,"line_start":726,"line_end":726,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":53617,"byte_end":53624,"line_start":751,"line_end":751,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedReentrantMutexGuard<'a, R, G, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":53596,"byte_end":53605,"line_start":750,"line_end":750,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":54997,"byte_end":55008,"line_start":788,"line_end":788,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":54976,"byte_end":54985,"line_start":787,"line_end":787,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":57405,"byte_end":57414,"line_start":31,"line_end":31,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":57720,"byte_end":57724,"line_start":36,"line_end":36,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":57661,"byte_end":57709,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":57889,"byte_end":57900,"line_start":40,"line_end":40,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":57997,"byte_end":58008,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":58085,"byte_end":58100,"line_start":46,"line_end":46,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"fn (&self) -> bool","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":58285,"byte_end":58298,"line_start":53,"line_end":53,"column_start":15,"column_end":28},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Releases a shared lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":58406,"byte_end":58420,"line_start":56,"line_end":56,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":58501,"byte_end":58519,"line_start":59,"line_end":59,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"fn (&self) -> bool","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":58712,"byte_end":58728,"line_start":66,"line_end":66,"column_start":15,"column_end":31},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":58823,"byte_end":58832,"line_start":70,"line_end":70,"column_start":8,"column_end":17},"name":"is_locked","qualname":"::rwlock::RawRwLock::is_locked","value":"fn (&self) -> bool","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Checks if this `RwLock` is currently locked in any way.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":58806,"byte_end":58815,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":59493,"byte_end":59506,"line_start":88,"line_end":88,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":59716,"byte_end":59734,"line_start":94,"line_end":94,"column_start":15,"column_end":33},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":59948,"byte_end":59969,"line_start":101,"line_end":101,"column_start":15,"column_end":36},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":60408,"byte_end":60419,"line_start":112,"line_end":112,"column_start":15,"column_end":26},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":60942,"byte_end":60956,"line_start":126,"line_end":126,"column_start":15,"column_end":29},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":61173,"byte_end":61191,"line_start":134,"line_end":134,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":474}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":61490,"byte_end":61499,"line_start":141,"line_end":141,"column_start":15,"column_end":24},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"fn (&self) -> ()","parent":{"krate":0,"index":473},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":61741,"byte_end":61755,"line_start":148,"line_end":148,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":61825,"byte_end":61833,"line_start":150,"line_end":150,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":61893,"byte_end":61900,"line_start":153,"line_end":153,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":61980,"byte_end":61999,"line_start":156,"line_end":156,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":62119,"byte_end":62140,"line_start":159,"line_end":159,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":62263,"byte_end":62285,"line_start":162,"line_end":162,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":62409,"byte_end":62433,"line_start":165,"line_end":165,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":62866,"byte_end":62884,"line_start":175,"line_end":175,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":62985,"byte_end":63006,"line_start":177,"line_end":177,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"fn (&self) -> ()","parent":{"krate":0,"index":482},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":63114,"byte_end":63139,"line_start":180,"line_end":180,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"fn (&self) -> bool","parent":{"krate":0,"index":482},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":485},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":63260,"byte_end":63283,"line_start":184,"line_end":184,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":63457,"byte_end":63486,"line_start":187,"line_end":187,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":485},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":63663,"byte_end":63694,"line_start":191,"line_end":191,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":485},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":64070,"byte_end":64086,"line_start":200,"line_end":200,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":64199,"byte_end":64214,"line_start":202,"line_end":202,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":64296,"byte_end":64315,"line_start":205,"line_end":205,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"fn (&self) -> bool","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":64510,"byte_end":64527,"line_start":212,"line_end":212,"column_start":15,"column_end":32},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":64735,"byte_end":64742,"line_start":219,"line_end":219,"column_start":15,"column_end":22},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"fn (&self) -> ()","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":64986,"byte_end":64997,"line_start":227,"line_end":227,"column_start":15,"column_end":26},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"fn (&self) -> bool","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":65124,"byte_end":65144,"line_start":232,"line_end":232,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":65387,"byte_end":65409,"line_start":238,"line_end":238,"column_start":15,"column_end":37},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":65866,"byte_end":65881,"line_start":249,"line_end":249,"column_start":15,"column_end":30},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":66080,"byte_end":66105,"line_start":257,"line_end":257,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":66343,"byte_end":66363,"line_start":263,"line_end":263,"column_start":15,"column_end":35},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":66572,"byte_end":66595,"line_start":270,"line_end":270,"column_start":15,"column_end":38},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":66721,"byte_end":66742,"line_start":275,"line_end":275,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":66862,"byte_end":66885,"line_start":277,"line_end":277,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":67010,"byte_end":67035,"line_start":280,"line_end":280,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":67321,"byte_end":67336,"line_start":288,"line_end":288,"column_start":15,"column_end":30},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":67623,"byte_end":67640,"line_start":296,"line_end":296,"column_start":15,"column_end":32},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":68392,"byte_end":68398,"line_start":311,"line_end":311,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":509}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":69673,"byte_end":69676,"line_start":362,"line_end":362,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"fn (val: T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":69615,"byte_end":69647,"line_start":360,"line_end":360,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":69652,"byte_end":69661,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":69919,"byte_end":69929,"line_start":372,"line_end":372,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":69870,"byte_end":69879,"line_start":370,"line_end":370,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":69884,"byte_end":69907,"line_start":371,"line_end":371,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":70249,"byte_end":70258,"line_start":384,"line_end":384,"column_start":18,"column_end":27},"name":"const_new","qualname":"<RwLock<R, T>>::const_new","value":"fn (raw_rwlock: R, val: T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new new instance of an `RwLock<T>` based on a pre-existing\n `RawRwLock<T>`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":70222,"byte_end":70231,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":71585,"byte_end":71589,"line_start":428,"line_end":428,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"fn (&self) -> RwLockReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":71564,"byte_end":71573,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":72092,"byte_end":72100,"line_start":442,"line_end":442,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"fn (&self) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":72071,"byte_end":72080,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":72719,"byte_end":72724,"line_start":460,"line_end":460,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"fn (&self) -> RwLockWriteGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":72698,"byte_end":72707,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":73223,"byte_end":73232,"line_start":474,"line_end":474,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"fn (&self) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":73202,"byte_end":73211,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":73728,"byte_end":73735,"line_start":488,"line_end":488,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":73707,"byte_end":73716,"line_start":487,"line_end":487,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":73901,"byte_end":73910,"line_start":494,"line_end":494,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<RwLock<R, T>>::is_locked","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this `RwLock` is currently locked in any way.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":73880,"byte_end":73889,"line_start":493,"line_end":493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":74499,"byte_end":74516,"line_start":510,"line_end":510,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":74471,"byte_end":74480,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":75107,"byte_end":75125,"line_start":526,"line_end":526,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":75079,"byte_end":75088,"line_start":525,"line_end":525,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":75591,"byte_end":75594,"line_start":540,"line_end":540,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":76226,"byte_end":76234,"line_start":557,"line_end":557,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<RwLock<R, T>>::data_ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":76205,"byte_end":76214,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":76900,"byte_end":76922,"line_start":575,"line_end":575,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":76872,"byte_end":76881,"line_start":574,"line_end":574,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":77547,"byte_end":77570,"line_start":591,"line_end":591,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":77519,"byte_end":77528,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":78022,"byte_end":78034,"line_start":604,"line_end":604,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":78001,"byte_end":78010,"line_start":603,"line_end":603,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":78647,"byte_end":78661,"line_start":620,"line_end":620,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":78626,"byte_end":78635,"line_start":619,"line_end":619,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":79282,"byte_end":79295,"line_start":636,"line_end":636,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":79261,"byte_end":79270,"line_start":635,"line_end":635,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":79920,"byte_end":79935,"line_start":652,"line_end":652,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":79899,"byte_end":79908,"line_start":651,"line_end":651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":81066,"byte_end":81080,"line_start":679,"line_end":679,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"fn (&self) -> RwLockReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":81045,"byte_end":81054,"line_start":678,"line_end":678,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":81764,"byte_end":81782,"line_start":696,"line_end":696,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"fn (&self) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":81743,"byte_end":81752,"line_start":695,"line_end":695,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":82629,"byte_end":82651,"line_start":718,"line_end":718,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":82608,"byte_end":82617,"line_start":717,"line_end":717,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":83297,"byte_end":83321,"line_start":737,"line_end":737,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":83276,"byte_end":83285,"line_start":736,"line_end":736,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":84449,"byte_end":84464,"line_start":772,"line_end":772,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"fn (&self) -> RwLockUpgradableReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":84428,"byte_end":84437,"line_start":771,"line_end":771,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":84991,"byte_end":85010,"line_start":786,"line_end":786,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"fn (&self) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":84970,"byte_end":84979,"line_start":785,"line_end":785,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":85673,"byte_end":85696,"line_start":804,"line_end":804,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":85652,"byte_end":85661,"line_start":803,"line_end":803,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":86356,"byte_end":86381,"line_start":823,"line_end":823,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":86335,"byte_end":86344,"line_start":822,"line_end":822,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":589},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":87854,"byte_end":87869,"line_start":873,"line_end":873,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":87782,"byte_end":87842,"line_start":872,"line_end":872,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":88235,"byte_end":88241,"line_start":882,"line_end":882,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":88721,"byte_end":88724,"line_start":895,"line_end":895,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockReadGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":88700,"byte_end":88709,"line_start":894,"line_end":894,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":89568,"byte_end":89575,"line_start":919,"line_end":919,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockReadGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":89547,"byte_end":89556,"line_start":918,"line_end":918,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":90327,"byte_end":90335,"line_start":943,"line_end":943,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":90306,"byte_end":90315,"line_start":942,"line_end":942,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":91490,"byte_end":91501,"line_start":970,"line_end":970,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":91469,"byte_end":91478,"line_start":969,"line_end":969,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":91985,"byte_end":91998,"line_start":985,"line_end":985,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":91964,"byte_end":91973,"line_start":984,"line_end":984,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":92579,"byte_end":92583,"line_start":1003,"line_end":1003,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":92558,"byte_end":92567,"line_start":1002,"line_end":1002,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":93911,"byte_end":93927,"line_start":1049,"line_end":1049,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":93839,"byte_end":93899,"line_start":1048,"line_end":1048,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":94299,"byte_end":94305,"line_start":1058,"line_end":1058,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":94788,"byte_end":94791,"line_start":1071,"line_end":1071,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockWriteGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":94767,"byte_end":94776,"line_start":1070,"line_end":1070,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":95652,"byte_end":95659,"line_start":1095,"line_end":1095,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockWriteGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":95631,"byte_end":95640,"line_start":1094,"line_end":1094,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":96360,"byte_end":96368,"line_start":1117,"line_end":1117,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":96339,"byte_end":96348,"line_start":1116,"line_end":1116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":97076,"byte_end":97085,"line_start":1137,"line_end":1137,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"fn (s: Self) -> RwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":97862,"byte_end":97885,"line_start":1158,"line_end":1158,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"fn (s: Self) -> RwLockUpgradableReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":99132,"byte_end":99143,"line_start":1186,"line_end":1186,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":99111,"byte_end":99120,"line_start":1185,"line_end":1185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":99635,"byte_end":99648,"line_start":1201,"line_end":1201,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":99614,"byte_end":99623,"line_start":1200,"line_end":1200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":100241,"byte_end":100245,"line_start":1219,"line_end":1219,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":100220,"byte_end":100229,"line_start":1218,"line_end":1218,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":101791,"byte_end":101816,"line_start":1272,"line_end":1272,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":716},{"krate":0,"index":717}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":101719,"byte_end":101779,"line_start":1271,"line_end":1271,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":102228,"byte_end":102234,"line_start":1284,"line_end":1284,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":102527,"byte_end":102535,"line_start":1293,"line_end":1293,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":102506,"byte_end":102515,"line_start":1292,"line_end":1292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":102989,"byte_end":102996,"line_start":1307,"line_end":1307,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"fn (s: Self) -> RwLockWriteGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":103535,"byte_end":103546,"line_start":1323,"line_end":1323,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"fn (s: Self) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":104870,"byte_end":104881,"line_start":1352,"line_end":1352,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":104849,"byte_end":104858,"line_start":1351,"line_end":1351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":105384,"byte_end":105397,"line_start":1367,"line_end":1367,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":105363,"byte_end":105372,"line_start":1366,"line_end":1366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":106012,"byte_end":106016,"line_start":1385,"line_end":1385,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":105991,"byte_end":106000,"line_start":1384,"line_end":1384,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":106669,"byte_end":106678,"line_start":1401,"line_end":1401,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"fn (s: Self) -> RwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":107382,"byte_end":107397,"line_start":1421,"line_end":1421,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"fn (s: Self, timeout: R::Duration) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":108140,"byte_end":108157,"line_start":1444,"line_end":1444,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"fn (s: Self, timeout: R::Instant) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":108119,"byte_end":108128,"line_start":1443,"line_end":1443,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":110206,"byte_end":110227,"line_start":1510,"line_end":1510,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":110134,"byte_end":110194,"line_start":1509,"line_end":1509,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":111073,"byte_end":111076,"line_start":1532,"line_end":1532,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockReadGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":111052,"byte_end":111061,"line_start":1531,"line_end":1531,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":111911,"byte_end":111918,"line_start":1556,"line_end":1556,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockReadGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":111890,"byte_end":111899,"line_start":1555,"line_end":1555,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":113243,"byte_end":113254,"line_start":1588,"line_end":1588,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":113222,"byte_end":113231,"line_start":1587,"line_end":1587,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":824},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":114928,"byte_end":114950,"line_start":1645,"line_end":1645,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":114856,"byte_end":114916,"line_start":1644,"line_end":1644,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":115809,"byte_end":115812,"line_start":1670,"line_end":1670,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockWriteGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":115788,"byte_end":115797,"line_start":1669,"line_end":1669,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":116664,"byte_end":116671,"line_start":1694,"line_end":1694,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockWriteGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":116643,"byte_end":116652,"line_start":1693,"line_end":1693,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":118012,"byte_end":118023,"line_start":1726,"line_end":1726,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":117991,"byte_end":118000,"line_start":1725,"line_end":1725,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":9230,"byte_end":9235,"line_start":140,"line_end":140,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":9304,"byte_end":9309,"line_start":141,"line_end":141,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":9341,"byte_end":9346,"line_start":143,"line_end":143,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":10024,"byte_end":10029,"line_start":171,"line_end":171,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":10396,"byte_end":10401,"line_start":184,"line_end":184,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":13984,"byte_end":13989,"line_start":291,"line_end":291,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":14641,"byte_end":14646,"line_start":309,"line_end":309,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":15847,"byte_end":15852,"line_start":341,"line_end":341,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":15990,"byte_end":15995,"line_start":348,"line_end":348,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":16141,"byte_end":16146,"line_start":355,"line_end":355,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":16435,"byte_end":16452,"line_start":361,"line_end":361,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":17945,"byte_end":17955,"line_start":415,"line_end":415,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":18013,"byte_end":18023,"line_start":417,"line_end":417,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":20405,"byte_end":20415,"line_start":491,"line_end":491,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":22447,"byte_end":22457,"line_start":546,"line_end":546,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":22641,"byte_end":22651,"line_start":554,"line_end":554,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":22826,"byte_end":22836,"line_start":561,"line_end":561,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":23087,"byte_end":23097,"line_start":571,"line_end":571,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":23293,"byte_end":23303,"line_start":577,"line_end":577,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":24169,"byte_end":24185,"line_start":601,"line_end":601,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":24259,"byte_end":24275,"line_start":604,"line_end":604,"column_start":60,"column_end":76},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":24365,"byte_end":24381,"line_start":609,"line_end":609,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":26135,"byte_end":26151,"line_start":661,"line_end":661,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":27173,"byte_end":27189,"line_start":684,"line_end":684,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":27361,"byte_end":27377,"line_start":692,"line_end":692,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":27540,"byte_end":27556,"line_start":699,"line_end":699,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":27807,"byte_end":27823,"line_start":709,"line_end":709,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":28023,"byte_end":28039,"line_start":716,"line_end":716,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":30595,"byte_end":30612,"line_start":67,"line_end":67,"column_start":65,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":30686,"byte_end":30703,"line_start":68,"line_end":68,"column_start":65,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":30748,"byte_end":30765,"line_start":70,"line_end":70,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":32896,"byte_end":32913,"line_start":140,"line_end":140,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":34219,"byte_end":34236,"line_start":178,"line_end":178,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":35335,"byte_end":35349,"line_start":209,"line_end":209,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":35449,"byte_end":35463,"line_start":213,"line_end":213,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":35515,"byte_end":35529,"line_start":217,"line_end":217,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":36643,"byte_end":36657,"line_start":255,"line_end":255,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":37327,"byte_end":37341,"line_start":275,"line_end":275,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":41160,"byte_end":41174,"line_start":384,"line_end":384,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":41863,"byte_end":41877,"line_start":402,"line_end":402,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":43121,"byte_end":43135,"line_start":434,"line_end":434,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":43313,"byte_end":43327,"line_start":441,"line_end":441,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":43513,"byte_end":43527,"line_start":448,"line_end":448,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":43879,"byte_end":43896,"line_start":457,"line_end":457,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":45544,"byte_end":45563,"line_start":514,"line_end":514,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":45646,"byte_end":45665,"line_start":518,"line_end":518,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":353},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":48223,"byte_end":48242,"line_start":596,"line_end":596,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":50337,"byte_end":50356,"line_start":653,"line_end":653,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":50566,"byte_end":50585,"line_start":663,"line_end":663,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":50875,"byte_end":50894,"line_start":675,"line_end":675,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":51118,"byte_end":51137,"line_start":683,"line_end":683,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":52153,"byte_end":52178,"line_start":711,"line_end":711,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":52265,"byte_end":52290,"line_start":716,"line_end":716,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":54162,"byte_end":54187,"line_start":773,"line_end":773,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":55260,"byte_end":55285,"line_start":798,"line_end":798,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":55481,"byte_end":55506,"line_start":808,"line_end":808,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":55794,"byte_end":55819,"line_start":820,"line_end":820,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":56043,"byte_end":56068,"line_start":828,"line_end":828,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":69145,"byte_end":69151,"line_start":345,"line_end":345,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":69228,"byte_end":69234,"line_start":346,"line_end":346,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":69267,"byte_end":69273,"line_start":348,"line_end":348,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":70005,"byte_end":70011,"line_start":377,"line_end":377,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":70435,"byte_end":70441,"line_start":392,"line_end":392,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":76321,"byte_end":76327,"line_start":562,"line_end":562,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":77666,"byte_end":77672,"line_start":596,"line_end":596,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":80254,"byte_end":80260,"line_start":662,"line_end":662,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":555},{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":82077,"byte_end":82083,"line_start":706,"line_end":706,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":83666,"byte_end":83672,"line_start":750,"line_end":750,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":85313,"byte_end":85319,"line_start":796,"line_end":796,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":86751,"byte_end":86757,"line_start":836,"line_end":836,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":86898,"byte_end":86904,"line_start":843,"line_end":843,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":87053,"byte_end":87059,"line_start":850,"line_end":850,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":87349,"byte_end":87366,"line_start":856,"line_end":856,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":88051,"byte_end":88066,"line_start":878,"line_end":878,"column_start":68,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":88125,"byte_end":88140,"line_start":880,"line_end":880,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":90657,"byte_end":90672,"line_start":956,"line_end":956,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":92796,"byte_end":92811,"line_start":1011,"line_end":1011,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":92993,"byte_end":93008,"line_start":1019,"line_end":1019,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":93279,"byte_end":93294,"line_start":1029,"line_end":1029,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":93495,"byte_end":93510,"line_start":1036,"line_end":1036,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":94113,"byte_end":94129,"line_start":1054,"line_end":1054,"column_start":68,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":94188,"byte_end":94204,"line_start":1056,"line_end":1056,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":96701,"byte_end":96717,"line_start":1130,"line_end":1130,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":97475,"byte_end":97491,"line_start":1151,"line_end":1151,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":98297,"byte_end":98313,"line_start":1172,"line_end":1172,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":100466,"byte_end":100482,"line_start":1227,"line_end":1227,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":690},{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":100668,"byte_end":100684,"line_start":1235,"line_end":1235,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":100861,"byte_end":100877,"line_start":1242,"line_end":1242,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":101156,"byte_end":101172,"line_start":1252,"line_end":1252,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":101373,"byte_end":101389,"line_start":1259,"line_end":1259,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":102016,"byte_end":102041,"line_start":1278,"line_end":1278,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":102108,"byte_end":102133,"line_start":1282,"line_end":1282,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":730},{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":104017,"byte_end":104042,"line_start":1338,"line_end":1338,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":106254,"byte_end":106279,"line_start":1393,"line_end":1393,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":107085,"byte_end":107110,"line_start":1415,"line_end":1415,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":108691,"byte_end":108716,"line_start":1462,"line_end":1462,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":756},{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":108905,"byte_end":108930,"line_start":1470,"line_end":1470,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":109231,"byte_end":109256,"line_start":1481,"line_end":1481,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":109464,"byte_end":109489,"line_start":1489,"line_end":1489,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":110397,"byte_end":110418,"line_start":1516,"line_end":1516,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":110492,"byte_end":110513,"line_start":1517,"line_end":1517,"column_start":61,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":110604,"byte_end":110625,"line_start":1522,"line_end":1522,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":112398,"byte_end":112419,"line_start":1574,"line_end":1574,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":113491,"byte_end":113512,"line_start":1597,"line_end":1597,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":113681,"byte_end":113702,"line_start":1605,"line_end":1605,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":113975,"byte_end":113996,"line_start":1616,"line_end":1616,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":114197,"byte_end":114218,"line_start":1624,"line_end":1624,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":115126,"byte_end":115148,"line_start":1652,"line_end":1652,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":115223,"byte_end":115245,"line_start":1655,"line_end":1655,"column_start":61,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":115336,"byte_end":115358,"line_start":1660,"line_end":1660,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":117165,"byte_end":117187,"line_start":1712,"line_end":1712,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":118268,"byte_end":118290,"line_start":1735,"line_end":1735,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":858},{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":118463,"byte_end":118485,"line_start":1743,"line_end":1743,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":118649,"byte_end":118671,"line_start":1750,"line_end":1750,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":118952,"byte_end":118974,"line_start":1761,"line_end":1761,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":119175,"byte_end":119197,"line_start":1769,"line_end":1769,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":7033,"byte_end":7041,"line_start":80,"line_end":80,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":19},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":8195,"byte_end":8203,"line_start":113,"line_end":113,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":19},"to":{"krate":0,"index":29}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":9230,"byte_end":9235,"line_start":140,"line_end":140,"column_start":60,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":34},"to":{"krate":1,"index":1533}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":9304,"byte_end":9309,"line_start":141,"line_end":141,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":34},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":9341,"byte_end":9346,"line_start":143,"line_end":143,"column_start":22,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":34},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":10024,"byte_end":10029,"line_start":171,"line_end":171,"column_start":12,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":34},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":10396,"byte_end":10401,"line_start":184,"line_end":184,"column_start":30,"column_end":35},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":34},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":13984,"byte_end":13989,"line_start":291,"line_end":291,"column_start":34,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":34},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":14641,"byte_end":14646,"line_start":309,"line_end":309,"column_start":35,"column_end":40},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":34},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":15847,"byte_end":15852,"line_start":341,"line_end":341,"column_start":52,"column_end":57},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":34},"to":{"krate":1,"index":2206}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":15990,"byte_end":15995,"line_start":348,"line_end":348,"column_start":34,"column_end":39},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":34},"to":{"krate":1,"index":2258}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":16141,"byte_end":16146,"line_start":355,"line_end":355,"column_start":58,"column_end":63},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":34},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":16435,"byte_end":16452,"line_start":361,"line_end":361,"column_start":37,"column_end":54},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":86},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":17945,"byte_end":17955,"line_start":415,"line_end":415,"column_start":74,"column_end":84},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":18013,"byte_end":18023,"line_start":417,"line_end":417,"column_start":44,"column_end":54},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":90},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":20405,"byte_end":20415,"line_start":491,"line_end":491,"column_start":48,"column_end":58},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":90},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":22447,"byte_end":22457,"line_start":546,"line_end":546,"column_start":54,"column_end":64},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":1704}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":22641,"byte_end":22651,"line_start":554,"line_end":554,"column_start":57,"column_end":67},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":1715}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":22826,"byte_end":22836,"line_start":561,"line_end":561,"column_start":53,"column_end":63},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":23087,"byte_end":23097,"line_start":571,"line_end":571,"column_start":72,"column_end":82},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":23293,"byte_end":23303,"line_start":577,"line_end":577,"column_start":76,"column_end":86},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":24169,"byte_end":24185,"line_start":601,"line_end":601,"column_start":9,"column_end":25},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":149},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":24259,"byte_end":24275,"line_start":604,"line_end":604,"column_start":60,"column_end":76},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":149},"to":{"krate":1,"index":1533}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":24365,"byte_end":24381,"line_start":609,"line_end":609,"column_start":44,"column_end":60},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":149},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":26135,"byte_end":26151,"line_start":661,"line_end":661,"column_start":48,"column_end":64},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":149},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":27173,"byte_end":27189,"line_start":684,"line_end":684,"column_start":54,"column_end":70},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":149},"to":{"krate":1,"index":1704}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":27361,"byte_end":27377,"line_start":692,"line_end":692,"column_start":57,"column_end":73},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":149},"to":{"krate":1,"index":1715}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":27540,"byte_end":27556,"line_start":699,"line_end":699,"column_start":53,"column_end":69},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":149},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":27807,"byte_end":27823,"line_start":709,"line_end":709,"column_start":72,"column_end":88},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":149},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\mutex.rs","byte_start":28023,"byte_end":28039,"line_start":716,"line_end":716,"column_start":9,"column_end":25},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":149},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":30595,"byte_end":30612,"line_start":67,"line_end":67,"column_start":65,"column_end":82},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":228},"to":{"krate":1,"index":1533}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":30686,"byte_end":30703,"line_start":68,"line_end":68,"column_start":65,"column_end":82},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":228},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":30748,"byte_end":30765,"line_start":70,"line_end":70,"column_start":35,"column_end":52},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":32896,"byte_end":32913,"line_start":140,"line_end":140,"column_start":39,"column_end":56},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":34219,"byte_end":34236,"line_start":178,"line_end":178,"column_start":40,"column_end":57},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":35335,"byte_end":35349,"line_start":209,"line_end":209,"column_start":9,"column_end":23},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":1533}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":35449,"byte_end":35463,"line_start":213,"line_end":213,"column_start":9,"column_end":23},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":35515,"byte_end":35529,"line_start":217,"line_end":217,"column_start":38,"column_end":52},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":36643,"byte_end":36657,"line_start":255,"line_end":255,"column_start":15,"column_end":29},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":37327,"byte_end":37341,"line_start":275,"line_end":275,"column_start":46,"column_end":60},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":41160,"byte_end":41174,"line_start":384,"line_end":384,"column_start":50,"column_end":64},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":41863,"byte_end":41877,"line_start":402,"line_end":402,"column_start":51,"column_end":65},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":43121,"byte_end":43135,"line_start":434,"line_end":434,"column_start":68,"column_end":82},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":2206}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":43313,"byte_end":43327,"line_start":441,"line_end":441,"column_start":50,"column_end":64},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":2258}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":43513,"byte_end":43527,"line_start":448,"line_end":448,"column_start":74,"column_end":88},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":43879,"byte_end":43896,"line_start":457,"line_end":457,"column_start":37,"column_end":54},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":328},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":45544,"byte_end":45563,"line_start":514,"line_end":514,"column_start":9,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":332},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":45646,"byte_end":45665,"line_start":518,"line_end":518,"column_start":65,"column_end":84},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":48223,"byte_end":48242,"line_start":596,"line_end":596,"column_start":5,"column_end":24},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":50337,"byte_end":50356,"line_start":653,"line_end":653,"column_start":9,"column_end":28},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":332},"to":{"krate":1,"index":1704}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":50566,"byte_end":50585,"line_start":663,"line_end":663,"column_start":9,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":332},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":50875,"byte_end":50894,"line_start":675,"line_end":675,"column_start":9,"column_end":28},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":332},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":51118,"byte_end":51137,"line_start":683,"line_end":683,"column_start":9,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":332},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":52153,"byte_end":52178,"line_start":711,"line_end":711,"column_start":9,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":394},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":52265,"byte_end":52290,"line_start":716,"line_end":716,"column_start":5,"column_end":30},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":54162,"byte_end":54187,"line_start":773,"line_end":773,"column_start":5,"column_end":30},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":55260,"byte_end":55285,"line_start":798,"line_end":798,"column_start":9,"column_end":34},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":394},"to":{"krate":1,"index":1704}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":55481,"byte_end":55506,"line_start":808,"line_end":808,"column_start":9,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":394},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":55794,"byte_end":55819,"line_start":820,"line_end":820,"column_start":9,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":394},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\remutex.rs","byte_start":56043,"byte_end":56068,"line_start":828,"line_end":828,"column_start":9,"column_end":34},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":394},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":59508,"byte_end":59517,"line_start":88,"line_end":88,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":458},"to":{"krate":0,"index":468}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":61193,"byte_end":61202,"line_start":134,"line_end":134,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":458},"to":{"krate":0,"index":473}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":61757,"byte_end":61766,"line_start":148,"line_end":148,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":458},"to":{"krate":0,"index":475}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":62886,"byte_end":62895,"line_start":175,"line_end":175,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":458},"to":{"krate":0,"index":482}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":63285,"byte_end":63303,"line_start":184,"line_end":184,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":482},"to":{"krate":0,"index":485}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":63306,"byte_end":63320,"line_start":184,"line_end":184,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":475},"to":{"krate":0,"index":485}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":64088,"byte_end":64097,"line_start":200,"line_end":200,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":458},"to":{"krate":0,"index":488}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":65146,"byte_end":65162,"line_start":232,"line_end":232,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":488},"to":{"krate":0,"index":494}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":65165,"byte_end":65178,"line_start":232,"line_end":232,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":468},"to":{"krate":0,"index":494}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":66107,"byte_end":66123,"line_start":257,"line_end":257,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":488},"to":{"krate":0,"index":497}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":66126,"byte_end":66144,"line_start":257,"line_end":257,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":473},"to":{"krate":0,"index":497}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":66744,"byte_end":66760,"line_start":275,"line_end":275,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":488},"to":{"krate":0,"index":500}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":66763,"byte_end":66777,"line_start":275,"line_end":275,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":475},"to":{"krate":0,"index":500}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":69145,"byte_end":69151,"line_start":345,"line_end":345,"column_start":61,"column_end":67},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":505},"to":{"krate":1,"index":1533}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":69228,"byte_end":69234,"line_start":346,"line_end":346,"column_start":68,"column_end":74},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":505},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":69267,"byte_end":69273,"line_start":348,"line_end":348,"column_start":23,"column_end":29},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":70005,"byte_end":70011,"line_start":377,"line_end":377,"column_start":12,"column_end":18},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":70435,"byte_end":70441,"line_start":392,"line_end":392,"column_start":31,"column_end":37},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":76321,"byte_end":76327,"line_start":562,"line_end":562,"column_start":35,"column_end":41},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":77666,"byte_end":77672,"line_start":596,"line_end":596,"column_start":36,"column_end":42},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":80254,"byte_end":80260,"line_start":662,"line_end":662,"column_start":40,"column_end":46},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":82077,"byte_end":82083,"line_start":706,"line_end":706,"column_start":45,"column_end":51},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":83666,"byte_end":83672,"line_start":750,"line_end":750,"column_start":38,"column_end":44},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":85313,"byte_end":85319,"line_start":796,"line_end":796,"column_start":43,"column_end":49},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":86751,"byte_end":86757,"line_start":836,"line_end":836,"column_start":53,"column_end":59},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":505},"to":{"krate":1,"index":2206}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":86898,"byte_end":86904,"line_start":843,"line_end":843,"column_start":35,"column_end":41},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":505},"to":{"krate":1,"index":2258}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":87053,"byte_end":87059,"line_start":850,"line_end":850,"column_start":59,"column_end":65},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":505},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":87349,"byte_end":87366,"line_start":856,"line_end":856,"column_start":37,"column_end":54},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":585},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":88051,"byte_end":88066,"line_start":878,"line_end":878,"column_start":68,"column_end":83},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":589},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":88125,"byte_end":88140,"line_start":880,"line_end":880,"column_start":45,"column_end":60},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":589},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":90657,"byte_end":90672,"line_start":956,"line_end":956,"column_start":49,"column_end":64},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":589},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":92796,"byte_end":92811,"line_start":1011,"line_end":1011,"column_start":55,"column_end":70},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":589},"to":{"krate":1,"index":1704}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":92993,"byte_end":93008,"line_start":1019,"line_end":1019,"column_start":54,"column_end":69},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":589},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":93279,"byte_end":93294,"line_start":1029,"line_end":1029,"column_start":73,"column_end":88},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":589},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":93495,"byte_end":93510,"line_start":1036,"line_end":1036,"column_start":9,"column_end":24},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":589},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":94113,"byte_end":94129,"line_start":1054,"line_end":1054,"column_start":68,"column_end":84},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":643},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":94188,"byte_end":94204,"line_start":1056,"line_end":1056,"column_start":45,"column_end":61},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":96701,"byte_end":96717,"line_start":1130,"line_end":1130,"column_start":54,"column_end":70},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":97475,"byte_end":97491,"line_start":1151,"line_end":1151,"column_start":61,"column_end":77},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":98297,"byte_end":98313,"line_start":1172,"line_end":1172,"column_start":49,"column_end":65},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":100466,"byte_end":100482,"line_start":1227,"line_end":1227,"column_start":55,"column_end":71},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":643},"to":{"krate":1,"index":1704}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":100668,"byte_end":100684,"line_start":1235,"line_end":1235,"column_start":58,"column_end":74},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":643},"to":{"krate":1,"index":1715}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":100861,"byte_end":100877,"line_start":1242,"line_end":1242,"column_start":54,"column_end":70},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":643},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":101156,"byte_end":101172,"line_start":1252,"line_end":1252,"column_start":73,"column_end":89},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":643},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":101373,"byte_end":101389,"line_start":1259,"line_end":1259,"column_start":9,"column_end":25},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":643},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":102016,"byte_end":102041,"line_start":1278,"line_end":1278,"column_start":9,"column_end":34},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":712},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":102108,"byte_end":102133,"line_start":1282,"line_end":1282,"column_start":52,"column_end":77},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":104017,"byte_end":104042,"line_start":1338,"line_end":1338,"column_start":56,"column_end":81},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":106254,"byte_end":106279,"line_start":1393,"line_end":1393,"column_start":61,"column_end":86},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":107085,"byte_end":107110,"line_start":1415,"line_end":1415,"column_start":57,"column_end":82},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":108691,"byte_end":108716,"line_start":1462,"line_end":1462,"column_start":62,"column_end":87},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":712},"to":{"krate":1,"index":1704}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":108905,"byte_end":108930,"line_start":1470,"line_end":1470,"column_start":61,"column_end":86},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":712},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":109231,"byte_end":109256,"line_start":1481,"line_end":1481,"column_start":9,"column_end":34},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":712},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":109464,"byte_end":109489,"line_start":1489,"line_end":1489,"column_start":9,"column_end":34},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":712},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":110397,"byte_end":110418,"line_start":1516,"line_end":1516,"column_start":68,"column_end":89},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":773},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":110492,"byte_end":110513,"line_start":1517,"line_end":1517,"column_start":61,"column_end":82},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":773},"to":{"krate":1,"index":1533}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":110604,"byte_end":110625,"line_start":1522,"line_end":1522,"column_start":45,"column_end":66},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":112398,"byte_end":112419,"line_start":1574,"line_end":1574,"column_start":49,"column_end":70},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":113491,"byte_end":113512,"line_start":1597,"line_end":1597,"column_start":55,"column_end":76},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":773},"to":{"krate":1,"index":1704}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":113681,"byte_end":113702,"line_start":1605,"line_end":1605,"column_start":54,"column_end":75},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":773},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":113975,"byte_end":113996,"line_start":1616,"line_end":1616,"column_start":9,"column_end":30},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":773},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":114197,"byte_end":114218,"line_start":1624,"line_end":1624,"column_start":9,"column_end":30},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":773},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":115126,"byte_end":115148,"line_start":1652,"line_end":1652,"column_start":9,"column_end":31},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":115223,"byte_end":115245,"line_start":1655,"line_end":1655,"column_start":61,"column_end":83},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":1533}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":115336,"byte_end":115358,"line_start":1660,"line_end":1660,"column_start":45,"column_end":67},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":117165,"byte_end":117187,"line_start":1712,"line_end":1712,"column_start":49,"column_end":71},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":118268,"byte_end":118290,"line_start":1735,"line_end":1735,"column_start":55,"column_end":77},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":1704}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":118463,"byte_end":118485,"line_start":1743,"line_end":1743,"column_start":58,"column_end":80},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":1715}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":118649,"byte_end":118671,"line_start":1750,"line_end":1750,"column_start":54,"column_end":76},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":118952,"byte_end":118974,"line_start":1761,"line_end":1761,"column_start":9,"column_end":31},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.1\\src\\rwlock.rs","byte_start":119175,"byte_end":119197,"line_start":1769,"line_end":1769,"column_start":9,"column_end":31},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":7648}}]}