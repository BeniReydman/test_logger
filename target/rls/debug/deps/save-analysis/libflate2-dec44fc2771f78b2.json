{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16","program":"C:\\Users\\Beni\\.rustup\\toolchains\\stable-i686-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","flate2","C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"miniz_oxide\"","--cfg","feature=\"rust_backend\"","-C","metadata=dec44fc2771f78b2","-C","extra-filename=-dec44fc2771f78b2","--out-dir","c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps","--extern","cfg_if=c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps\\libcfg_if-f4b2454d74a80838.rmeta","--extern","crc32fast=c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps\\libcrc32fast-3f681b2c03532bbd.rmeta","--extern","libc=c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps\\liblibc-f299a566a5d82fd2.rmeta","--extern","miniz_oxide=c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps\\libminiz_oxide-dac70d4912a461c6.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Beni\\.rustup/toolchains/stable-i686-pc-windows-msvc"],"output":"c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps\\libflate2-dec44fc2771f78b2.rmeta"},"prelude":{"crate_id":{"name":"flate2","disambiguator":[16196429744911349956,1872784973880029552]},"crate_root":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src","external_crates":[{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[17547299525433066937,6462703543472652821]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[6764811272097449003,13681722573116367099]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9485826678459717252,15756974541460141494]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15954912595519161470,12922162993496933985]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5824572747488578400,18164785604033351576]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[10331641369357162511,17836984904787579268]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8495357030570666042,9830701870303456689]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9657771536831955996,2892192969278695320]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[12375917788909833983,1997691704544372736]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[16952125311933509182,18402636855086965869]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[10744862195025581238,6478452609884575256]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8143783028888645125,5443838079021418384]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[2060411395260400816,11913745625441100273]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","num":14,"id":{"name":"crc32fast","disambiguator":[134275006582263264,12998307451590829888]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\mod.rs","num":15,"id":{"name":"cfg_if","disambiguator":[12264963404521768264,13162333806926070749]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\rust.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[555413454075485249,12275488173367186881]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\rust.rs","num":17,"id":{"name":"adler","disambiguator":[7590595408050383913,11792290464065558059]}}],"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":0,"byte_end":8512,"line_start":1,"line_end":234,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4596,"byte_end":4599,"line_start":110,"line_end":110,"column_start":22,"column_end":25},"alias_span":null,"name":"Crc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4601,"byte_end":4610,"line_start":110,"line_end":110,"column_start":27,"column_end":36},"alias_span":null,"name":"CrcReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4612,"byte_end":4621,"line_start":110,"line_end":110,"column_start":38,"column_end":47},"alias_span":null,"name":"CrcWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":971},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4643,"byte_end":4652,"line_start":111,"line_end":111,"column_start":20,"column_end":29},"alias_span":null,"name":"GzBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":955},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4673,"byte_end":4681,"line_start":112,"line_end":112,"column_start":20,"column_end":28},"alias_span":null,"name":"GzHeader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":979},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4704,"byte_end":4712,"line_start":113,"line_end":113,"column_start":22,"column_end":30},"alias_span":null,"name":"Compress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1050},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4714,"byte_end":4727,"line_start":113,"line_end":113,"column_start":32,"column_end":45},"alias_span":null,"name":"CompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":983},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4729,"byte_end":4739,"line_start":113,"line_end":113,"column_start":47,"column_end":57},"alias_span":null,"name":"Decompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1045},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4741,"byte_end":4756,"line_start":113,"line_end":113,"column_start":59,"column_end":74},"alias_span":null,"name":"DecompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1055},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4758,"byte_end":4764,"line_start":113,"line_end":113,"column_start":76,"column_end":82},"alias_span":null,"name":"Status","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":987},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4788,"byte_end":4801,"line_start":114,"line_end":114,"column_start":22,"column_end":35},"alias_span":null,"name":"FlushCompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1016},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4803,"byte_end":4818,"line_start":114,"line_end":114,"column_start":37,"column_end":52},"alias_span":null,"name":"FlushDecompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5120,"byte_end":5134,"line_start":130,"line_end":130,"column_start":35,"column_end":49},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":811},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5170,"byte_end":5184,"line_start":131,"line_end":131,"column_start":35,"column_end":49},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":925},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5215,"byte_end":5224,"line_start":132,"line_end":132,"column_start":30,"column_end":39},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":919},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5255,"byte_end":5264,"line_start":133,"line_end":133,"column_start":30,"column_end":39},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":931},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5295,"byte_end":5309,"line_start":134,"line_end":134,"column_start":30,"column_end":44},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":1103},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5342,"byte_end":5353,"line_start":135,"line_end":135,"column_start":32,"column_end":43},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":1097},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5386,"byte_end":5397,"line_start":136,"line_end":136,"column_start":32,"column_end":43},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":829},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5622,"byte_end":5636,"line_start":144,"line_end":144,"column_start":36,"column_end":50},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":752}},{"kind":"Use","ref_id":{"krate":0,"index":823},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5673,"byte_end":5687,"line_start":145,"line_end":145,"column_start":36,"column_end":50},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":752}},{"kind":"Use","ref_id":{"krate":0,"index":946},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5719,"byte_end":5728,"line_start":146,"line_end":146,"column_start":31,"column_end":40},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":752}},{"kind":"Use","ref_id":{"krate":0,"index":937},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5760,"byte_end":5769,"line_start":147,"line_end":147,"column_start":31,"column_end":40},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":752}},{"kind":"Use","ref_id":{"krate":0,"index":1115},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5803,"byte_end":5814,"line_start":148,"line_end":148,"column_start":33,"column_end":44},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":752}},{"kind":"Use","ref_id":{"krate":0,"index":1109},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5848,"byte_end":5859,"line_start":149,"line_end":149,"column_start":33,"column_end":44},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":752}},{"kind":"Use","ref_id":{"krate":0,"index":804},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":6094,"byte_end":6108,"line_start":157,"line_end":157,"column_start":38,"column_end":52},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":759}},{"kind":"Use","ref_id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":6147,"byte_end":6161,"line_start":158,"line_end":158,"column_start":38,"column_end":52},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":759}},{"kind":"Use","ref_id":{"krate":0,"index":885},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":6195,"byte_end":6204,"line_start":159,"line_end":159,"column_start":33,"column_end":42},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":759}},{"kind":"Use","ref_id":{"krate":0,"index":876},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":6238,"byte_end":6247,"line_start":160,"line_end":160,"column_start":33,"column_end":42},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":759}},{"kind":"Use","ref_id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":6281,"byte_end":6295,"line_start":161,"line_end":161,"column_start":33,"column_end":47},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":759}},{"kind":"Use","ref_id":{"krate":0,"index":1090},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":6331,"byte_end":6342,"line_start":162,"line_end":162,"column_start":35,"column_end":46},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":759}},{"kind":"Use","ref_id":{"krate":0,"index":1083},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":6378,"byte_end":6389,"line_start":163,"line_end":163,"column_start":35,"column_end":46},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":759}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":0,"byte_end":8512,"line_start":1,"line_end":234,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":49},{"krate":0,"index":91},{"krate":0,"index":225},{"krate":0,"index":244},{"krate":0,"index":504},{"krate":0,"index":545},{"krate":0,"index":611},{"krate":0,"index":744},{"krate":0,"index":752},{"krate":0,"index":759},{"krate":0,"index":767},{"krate":0,"index":1121},{"krate":0,"index":1135},{"krate":0,"index":1133},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1124},{"krate":0,"index":770},{"krate":0,"index":776}],"decl_id":null,"docs":" A DEFLATE-based stream compression/decompression library","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4443,"byte_end":4465,"line_start":105,"line_end":105,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4466,"byte_end":4505,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"allow(trivial_numeric_casts)","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":4506,"byte_end":4538,"line_start":107,"line_end":107,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":11531,"byte_end":11534,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"Crc","qualname":"::crc::Crc","value":"Crc {  }","parent":null,"children":[{"krate":0,"index":779},{"krate":0,"index":780}],"decl_id":null,"docs":" The CRC calculated by a [`CrcReader`].","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":11726,"byte_end":11735,"line_start":21,"line_end":21,"column_start":12,"column_end":21},"name":"CrcReader","qualname":"::crc::CrcReader","value":"CrcReader {  }","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":786}],"decl_id":null,"docs":" A wrapper around a [`Read`] that calculates the CRC.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":11820,"byte_end":11823,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<Crc>::new","value":"fn () -> Crc","parent":null,"children":[],"decl_id":null,"docs":" Create a new CRC.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":11976,"byte_end":11979,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"sum","qualname":"<Crc>::sum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current crc32 checksum.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":12203,"byte_end":12209,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"amount","qualname":"<Crc>::amount","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The number of bytes that have been used to calculate the CRC.\n This value is only accurate if the amount is lower than 2<sup>32</sup>.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":12310,"byte_end":12316,"line_start":47,"line_end":47,"column_start":12,"column_end":18},"name":"update","qualname":"<Crc>::update","value":"fn (&mut self, data: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the CRC with the bytes in `data`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":12479,"byte_end":12484,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"reset","qualname":"<Crc>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the CRC.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":12639,"byte_end":12646,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"combine","qualname":"<Crc>::combine","value":"fn (&mut self, additional_crc: &Crc) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Combine the CRC with the CRC for the subsequent block of bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":12856,"byte_end":12859,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcReader<R>>::new","value":"fn (r: R) -> CrcReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":13048,"byte_end":13051,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcReader<R>>::crc","value":"fn (&self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":13163,"byte_end":13173,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcReader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":13295,"byte_end":13302,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcReader<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader by reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":13437,"byte_end":13444,"line_start":92,"line_end":92,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcReader<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":13551,"byte_end":13556,"line_start":97,"line_end":97,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcReader<R>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":14282,"byte_end":14291,"line_start":126,"line_end":126,"column_start":12,"column_end":21},"name":"CrcWriter","qualname":"::crc::CrcWriter","value":"CrcWriter {  }","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":793}],"decl_id":null,"docs":" A wrapper around a [`Write`] that calculates the CRC.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":14402,"byte_end":14405,"line_start":133,"line_end":133,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcWriter<W>>::crc","value":"fn (&self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":14517,"byte_end":14527,"line_start":138,"line_end":138,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcWriter<W>>::into_inner","value":"fn (self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Get the writer that is wrapped by this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":14649,"byte_end":14656,"line_start":143,"line_end":143,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcWriter<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Get the writer that is wrapped by this CrcWriter by reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":14791,"byte_end":14798,"line_start":148,"line_end":148,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcWriter<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the writer that is wrapped by this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":14905,"byte_end":14910,"line_start":153,"line_end":153,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcWriter<W>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":15032,"byte_end":15035,"line_start":160,"line_end":160,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcWriter<W>>::new","value":"fn (w: W) -> CrcWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":22829,"byte_end":22843,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::bufread::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":23058,"byte_end":23061,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"fn (r: R, level: crate::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":23727,"byte_end":23732,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":23902,"byte_end":23909,"line_start":79,"line_end":79,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":24154,"byte_end":24161,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":24289,"byte_end":24299,"line_start":92,"line_end":92,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":24570,"byte_end":24578,"line_start":100,"line_end":100,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":24812,"byte_end":24821,"line_start":108,"line_end":108,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":804},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":26646,"byte_end":26660,"line_start":171,"line_end":171,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::bufread::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":807}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":26948,"byte_end":26951,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (r: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":27491,"byte_end":27496,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":27783,"byte_end":27793,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoder<R>>::reset_data","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder's data","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":27913,"byte_end":27920,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":28165,"byte_end":28172,"line_start":221,"line_end":221,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":28300,"byte_end":28310,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":28579,"byte_end":28587,"line_start":234,"line_end":234,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":28723,"byte_end":28732,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":811},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":30608,"byte_end":30622,"line_start":41,"line_end":41,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::read::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":813}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":30852,"byte_end":30855,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"fn (r: R, level: crate::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":31592,"byte_end":31597,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":31793,"byte_end":31800,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":32066,"byte_end":32073,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":32414,"byte_end":32424,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":32723,"byte_end":32731,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":32966,"byte_end":32975,"line_start":105,"line_end":105,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":34750,"byte_end":34764,"line_start":168,"line_end":168,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::read::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":819}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":34961,"byte_end":34964,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (r: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":35282,"byte_end":35294,"line_start":183,"line_end":183,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<DeflateDecoder<R>>::new_with_buf","value":"fn (r: R, buf: Vec<u8>) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":36014,"byte_end":36019,"line_start":201,"line_end":201,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":36215,"byte_end":36222,"line_start":207,"line_end":207,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":36488,"byte_end":36495,"line_start":215,"line_end":215,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":36836,"byte_end":36846,"line_start":224,"line_end":224,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":37143,"byte_end":37151,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":37288,"byte_end":37297,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":823},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":38900,"byte_end":38914,"line_start":35,"line_end":35,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::write::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":825}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":39244,"byte_end":39247,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<W>>::new","value":"fn (w: W, level: crate::Compression) -> DeflateEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":39481,"byte_end":39488,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":39765,"byte_end":39772,"line_start":60,"line_end":60,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":40650,"byte_end":40655,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":41415,"byte_end":41425,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":42260,"byte_end":42266,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":42951,"byte_end":42963,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<DeflateEncoder<W>>::flush_finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":43289,"byte_end":43297,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":43540,"byte_end":43549,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":829},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":45481,"byte_end":45495,"line_start":220,"line_end":220,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::write::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":831}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":45784,"byte_end":45787,"line_start":229,"line_end":229,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<W>>::new","value":"fn (w: W) -> DeflateDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":45989,"byte_end":45996,"line_start":236,"line_end":236,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":46273,"byte_end":46280,"line_start":244,"line_end":244,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":47061,"byte_end":47066,"line_start":263,"line_end":263,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":47807,"byte_end":47817,"line_start":284,"line_end":284,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":48631,"byte_end":48637,"line_start":303,"line_end":303,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":48999,"byte_end":49007,"line_start":313,"line_end":313,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":49177,"byte_end":49186,"line_start":319,"line_end":319,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":876},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":66601,"byte_end":66610,"line_start":151,"line_end":151,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::bufread::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":67378,"byte_end":67381,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"fn (r: R, level: Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":68136,"byte_end":68143,"line_start":201,"line_end":201,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":68410,"byte_end":68417,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":68560,"byte_end":68570,"line_start":214,"line_end":214,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":885},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":70937,"byte_end":70946,"line_start":300,"line_end":300,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::bufread::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":72328,"byte_end":72331,"line_start":354,"line_end":354,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"fn (mut r: R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":73281,"byte_end":73287,"line_start":388,"line_end":388,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":73420,"byte_end":73427,"line_start":393,"line_end":393,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":73695,"byte_end":73702,"line_start":401,"line_end":401,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":73848,"byte_end":73858,"line_start":406,"line_end":406,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":80016,"byte_end":80030,"line_start":581,"line_end":581,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::bufread::MultiGzDecoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":80278,"byte_end":80281,"line_start":587,"line_end":587,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"fn (r: R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":80491,"byte_end":80497,"line_start":594,"line_end":594,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":80625,"byte_end":80632,"line_start":599,"line_end":599,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":80885,"byte_end":80892,"line_start":607,"line_end":607,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":81023,"byte_end":81033,"line_start":612,"line_end":612,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":919},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":82834,"byte_end":82843,"line_start":41,"line_end":41,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::read::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":921}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":83391,"byte_end":83394,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"fn (r: R, level: Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":83577,"byte_end":83584,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":83851,"byte_end":83858,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":84001,"byte_end":84011,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":925},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":85476,"byte_end":85485,"line_start":133,"line_end":133,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::read::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":927}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":85677,"byte_end":85680,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"fn (r: R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":85914,"byte_end":85920,"line_start":149,"line_end":149,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":86052,"byte_end":86059,"line_start":154,"line_end":154,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":86326,"byte_end":86333,"line_start":162,"line_end":162,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":86478,"byte_end":86488,"line_start":167,"line_end":167,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":931},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":88714,"byte_end":88728,"line_start":239,"line_end":239,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::read::MultiGzDecoder","value":"MultiGzDecoder {  }","parent":null,"children":[{"krate":0,"index":933}],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":89012,"byte_end":89015,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"fn (r: R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":89275,"byte_end":89281,"line_start":256,"line_end":256,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":89413,"byte_end":89420,"line_start":261,"line_end":261,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":89687,"byte_end":89694,"line_start":269,"line_end":269,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":89839,"byte_end":89849,"line_start":274,"line_end":274,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":937},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":91560,"byte_end":91569,"line_start":39,"line_end":39,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::write::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":92316,"byte_end":92319,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<W>>::new","value":"fn (w: W, level: Compression) -> GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":92478,"byte_end":92485,"line_start":68,"line_end":68,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":92742,"byte_end":92749,"line_start":76,"line_end":76,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":93428,"byte_end":93438,"line_start":95,"line_end":95,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":94811,"byte_end":94817,"line_start":131,"line_end":131,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding this stream, returning the underlying writer once the\n encoding is done.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":946},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":97281,"byte_end":97290,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::write::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":97697,"byte_end":97700,"line_start":233,"line_end":233,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<W>>::new","value":"fn (w: W) -> GzDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":98029,"byte_end":98035,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<W>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":98168,"byte_end":98175,"line_start":248,"line_end":248,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":98462,"byte_end":98469,"line_start":256,"line_end":256,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":99122,"byte_end":99132,"line_start":275,"line_end":275,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":99971,"byte_end":99977,"line_start":295,"line_end":295,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":955},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":51756,"byte_end":51764,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"GzHeader","qualname":"::gz::GzHeader","value":"GzHeader {  }","parent":null,"children":[{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960}],"decl_id":null,"docs":" A structure representing the header of a gzip stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":52007,"byte_end":52015,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzHeader>::filename","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `filename` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":52183,"byte_end":52188,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzHeader>::extra","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `extra` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":52355,"byte_end":52362,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzHeader>::comment","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `comment` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":52648,"byte_end":52664,"line_start":50,"line_end":50,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzHeader>::operating_system","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the `operating_system` field of this gzip stream's header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":53286,"byte_end":53291,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzHeader>::mtime","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" This gives the most recent modification time of the original file being compressed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":53686,"byte_end":53703,"line_start":74,"line_end":74,"column_start":12,"column_end":29},"name":"mtime_as_datetime","qualname":"<GzHeader>::mtime_as_datetime","value":"fn (&self) -> Option<time::SystemTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns the most recent modification time represented by a date-time type.\n Returns `None` if the value of the underlying counter is 0,\n indicating no time stamp is available.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":971},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":54776,"byte_end":54785,"line_start":112,"line_end":112,"column_start":12,"column_end":21},"name":"GzBuilder","qualname":"::gz::GzBuilder","value":"GzBuilder {  }","parent":null,"children":[{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976}],"decl_id":null,"docs":" A builder structure to create a new gzip Encoder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":55020,"byte_end":55023,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<GzBuilder>::new","value":"fn () -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new blank builder with no header by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":55283,"byte_end":55288,"line_start":133,"line_end":133,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzBuilder>::mtime","value":"fn (mut self, mtime: u32) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `mtime` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":55452,"byte_end":55468,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzBuilder>::operating_system","value":"fn (mut self, os: u8) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `operating_system` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":55631,"byte_end":55636,"line_start":145,"line_end":145,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzBuilder>::extra","value":"fn <T> (mut self, extra: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `extra` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":55910,"byte_end":55918,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzBuilder>::filename","value":"fn <T> (mut self, filename: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `filename` field in the gzip header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":56222,"byte_end":56229,"line_start":165,"line_end":165,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzBuilder>::comment","value":"fn <T> (mut self, comment: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `comment` field in the gzip header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":56592,"byte_end":56597,"line_start":174,"line_end":174,"column_start":12,"column_end":17},"name":"write","qualname":"<GzBuilder>::write","value":"fn <W> (self, w: W, lvl: Compression) -> write::GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a writer encoder in the process.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":56941,"byte_end":56945,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"read","qualname":"<GzBuilder>::read","value":"fn <R> (self, r: R, lvl: Compression) -> read::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":57294,"byte_end":57302,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"buf_read","qualname":"<GzBuilder>::buf_read","value":"fn <R> (self, r: R, lvl: Compression) -> bufread::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":979},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":107065,"byte_end":107073,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"Compress","qualname":"::mem::Compress","value":"Compress {  }","parent":null,"children":[{"krate":0,"index":980}],"decl_id":null,"docs":" Raw in-memory compression stream for blocks of data.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":983},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":107706,"byte_end":107716,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"Decompress","qualname":"::mem::Decompress","value":"Decompress {  }","parent":null,"children":[{"krate":0,"index":984}],"decl_id":null,"docs":" Raw in-memory decompression stream for blocks of data.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":988},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":108145,"byte_end":108149,"line_start":50,"line_end":50,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushCompress::None","value":"FlushCompress::None","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":991},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":108600,"byte_end":108604,"line_start":59,"line_end":59,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushCompress::Sync","value":"FlushCompress::Sync","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":109137,"byte_end":109144,"line_start":69,"line_end":69,"column_start":5,"column_end":12},"name":"Partial","qualname":"::mem::FlushCompress::Partial","value":"FlushCompress::Partial","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer, but the output is\n not aligned to a byte boundary.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":997},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":109488,"byte_end":109492,"line_start":76,"line_end":76,"column_start":5,"column_end":9},"name":"Full","qualname":"::mem::FlushCompress::Full","value":"FlushCompress::Full","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" All output is flushed as with `Flush::Sync` and the compression state is\n reset so decompression can restart from this point if previous\n compressed data has been damaged or if random access is desired.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1000},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":109720,"byte_end":109726,"line_start":82,"line_end":82,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushCompress::Finish","value":"FlushCompress::Finish","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1003},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":109778,"byte_end":109792,"line_start":85,"line_end":85,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushCompress::_Nonexhaustive","value":"FlushCompress::_Nonexhaustive","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":987},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":107891,"byte_end":107904,"line_start":46,"line_end":46,"column_start":10,"column_end":23},"name":"FlushCompress","qualname":"::mem::FlushCompress","value":"FlushCompress::{None, Sync, Partial, Full, Finish, _Nonexhaustive}","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":991},{"krate":0,"index":994},{"krate":0,"index":997},{"krate":0,"index":1000},{"krate":0,"index":1003}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when compressing\n in-memory data.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1017},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":110204,"byte_end":110208,"line_start":95,"line_end":95,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushDecompress::None","value":"FlushDecompress::None","parent":{"krate":0,"index":1016},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1020},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":110659,"byte_end":110663,"line_start":104,"line_end":104,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushDecompress::Sync","value":"FlushDecompress::Sync","parent":{"krate":0,"index":1016},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1023},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":110891,"byte_end":110897,"line_start":110,"line_end":110,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushDecompress::Finish","value":"FlushDecompress::Finish","parent":{"krate":0,"index":1016},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1026},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":110949,"byte_end":110963,"line_start":113,"line_end":113,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushDecompress::_Nonexhaustive","value":"FlushDecompress::_Nonexhaustive","parent":{"krate":0,"index":1016},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1016},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":109948,"byte_end":109963,"line_start":91,"line_end":91,"column_start":10,"column_end":25},"name":"FlushDecompress","qualname":"::mem::FlushDecompress","value":"FlushDecompress::{None, Sync, Finish, _Nonexhaustive}","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when\n decompressing in-memory data.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1045},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":111291,"byte_end":111306,"line_start":125,"line_end":125,"column_start":12,"column_end":27},"name":"DecompressError","qualname":"::mem::DecompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a decompression object finds that the input stream of\n bytes was not a valid input stream of bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":111553,"byte_end":111569,"line_start":132,"line_end":132,"column_start":12,"column_end":28},"name":"needs_dictionary","qualname":"<DecompressError>::needs_dictionary","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether decompression failed due to requiring a dictionary.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1050},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":112085,"byte_end":112098,"line_start":152,"line_end":152,"column_start":12,"column_end":25},"name":"CompressError","qualname":"::mem::CompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a compression object is used incorrectly or otherwise\n generates an error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1056},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":112466,"byte_end":112468,"line_start":162,"line_end":162,"column_start":5,"column_end":7},"name":"Ok","qualname":"::mem::Status::Ok","value":"Status::Ok","parent":{"krate":0,"index":1055},"children":[],"decl_id":null,"docs":" Indicates success.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1058},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":112947,"byte_end":112955,"line_start":173,"line_end":173,"column_start":5,"column_end":13},"name":"BufError","qualname":"::mem::Status::BufError","value":"Status::BufError","parent":{"krate":0,"index":1055},"children":[],"decl_id":null,"docs":" Indicates that forward progress is not possible due to input or output\n buffers being empty.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1060},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":113237,"byte_end":113246,"line_start":180,"line_end":180,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::mem::Status::StreamEnd","value":"Status::StreamEnd","parent":{"krate":0,"index":1055},"children":[],"decl_id":null,"docs":" Indicates that all input has been consumed and all output bytes have\n been written. Decompression/compression should not be called again.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1055},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":112274,"byte_end":112280,"line_start":157,"line_end":157,"column_start":10,"column_end":16},"name":"Status","qualname":"::mem::Status","value":"Status::{Ok, BufError, StreamEnd}","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1060}],"decl_id":null,"docs":" Possible status results of compressing some data or successfully\n decompressing a block of data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":113570,"byte_end":113573,"line_start":189,"line_end":189,"column_start":12,"column_end":15},"name":"new","qualname":"<Compress>::new","value":"fn (level: Compression, zlib_header: bool) -> Compress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for compressing data that it's given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":114881,"byte_end":114889,"line_start":225,"line_end":225,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Compress>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this compression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":115064,"byte_end":115073,"line_start":231,"line_end":231,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Compress>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this compression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":116015,"byte_end":116020,"line_start":256,"line_end":256,"column_start":12,"column_end":17},"name":"reset","qualname":"<Compress>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Quickly resets this compressor without having to reallocate anything.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":117505,"byte_end":117513,"line_start":291,"line_end":291,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compress>::compress","value":"fn (&mut self, input: &[u8], output: &mut [u8], flush: FlushCompress) -> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":118214,"byte_end":118226,"line_start":308,"line_end":308,"column_start":12,"column_end":24},"name":"compress_vec","qualname":"<Compress>::compress_vec","value":"fn (&mut self, input: &[u8], output: &mut Vec<u8>, flush: FlushCompress) -> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the extra space of the output, consuming\n only as much input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":119070,"byte_end":119073,"line_start":335,"line_end":335,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompress>::new","value":"fn (zlib_header: bool) -> Decompress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for decompressing data that it's given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":120207,"byte_end":120215,"line_start":365,"line_end":365,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Decompress>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this decompression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":120392,"byte_end":120401,"line_start":371,"line_end":371,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Decompress>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this decompression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":121600,"byte_end":121610,"line_start":397,"line_end":397,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompress>::decompress","value":"fn (&mut self, input: &[u8], output: &mut [u8], flush: FlushDecompress) -> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":122534,"byte_end":122548,"line_start":420,"line_end":420,"column_start":12,"column_end":26},"name":"decompress_vec","qualname":"<Decompress>::decompress_vec","value":"fn (&mut self, input: &[u8], output: &mut Vec<u8>, flush: FlushDecompress) -> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the extra space in the output vector\n specified by `output`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":124372,"byte_end":124377,"line_start":468,"line_end":468,"column_start":12,"column_end":17},"name":"reset","qualname":"<Decompress>::reset","value":"fn (&mut self, zlib_header: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the equivalent of replacing this decompression state with a\n freshly allocated copy.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":130848,"byte_end":130853,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"Flush","qualname":"::zio::Ops::Flush","value":"type Flush: Flush;","parent":{"krate":0,"index":556},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1083},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":144713,"byte_end":144724,"line_start":41,"line_end":41,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::bufread::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":144936,"byte_end":144939,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"fn (r: R, level: crate::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":145591,"byte_end":145596,"line_start":69,"line_end":69,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":145766,"byte_end":145773,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":146018,"byte_end":146025,"line_start":83,"line_end":83,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":146153,"byte_end":146163,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":146434,"byte_end":146442,"line_start":96,"line_end":96,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":146676,"byte_end":146685,"line_start":104,"line_end":104,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1090},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":148477,"byte_end":148488,"line_start":169,"line_end":169,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::bufread::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1093}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":148669,"byte_end":148672,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"fn (r: R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":149302,"byte_end":149307,"line_start":197,"line_end":197,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":149477,"byte_end":149484,"line_start":203,"line_end":203,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":149729,"byte_end":149736,"line_start":211,"line_end":211,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":149864,"byte_end":149874,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":150143,"byte_end":150151,"line_start":224,"line_end":224,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":150287,"byte_end":150296,"line_start":229,"line_end":229,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1097},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":152043,"byte_end":152054,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::read::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":1099}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":152278,"byte_end":152281,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"fn (r: R, level: crate::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":153006,"byte_end":153011,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":153207,"byte_end":153214,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":153480,"byte_end":153487,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":153828,"byte_end":153838,"line_start":86,"line_end":86,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":154137,"byte_end":154145,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":154380,"byte_end":154389,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1103},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":156122,"byte_end":156133,"line_start":167,"line_end":167,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::read::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":1105}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":156324,"byte_end":156327,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"fn (r: R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":156654,"byte_end":156666,"line_start":182,"line_end":182,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<ZlibDecoder<R>>::new_with_buf","value":"fn (r: R, buf: Vec<u8>) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":157374,"byte_end":157379,"line_start":200,"line_end":200,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":157575,"byte_end":157582,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":157848,"byte_end":157855,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":158196,"byte_end":158206,"line_start":223,"line_end":223,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":158503,"byte_end":158511,"line_start":231,"line_end":231,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":158648,"byte_end":158657,"line_start":236,"line_end":236,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1109},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":160269,"byte_end":160280,"line_start":36,"line_end":36,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::write::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":1111}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":160607,"byte_end":160610,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<W>>::new","value":"fn (w: W, level: crate::Compression) -> ZlibEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":160837,"byte_end":160844,"line_start":53,"line_end":53,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":161121,"byte_end":161128,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":161943,"byte_end":161948,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":162708,"byte_end":162718,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":163553,"byte_end":163559,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":164244,"byte_end":164256,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<ZlibEncoder<W>>::flush_finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":164582,"byte_end":164590,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":164833,"byte_end":164842,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1115},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":166720,"byte_end":166731,"line_start":222,"line_end":222,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::write::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":1117}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":167017,"byte_end":167020,"line_start":231,"line_end":231,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<W>>::new","value":"fn (w: W) -> ZlibDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":167215,"byte_end":167222,"line_start":238,"line_end":238,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":167499,"byte_end":167506,"line_start":246,"line_end":246,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":168120,"byte_end":168125,"line_start":262,"line_end":262,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":168901,"byte_end":168911,"line_start":283,"line_end":283,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":169725,"byte_end":169731,"line_start":302,"line_end":302,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":170093,"byte_end":170101,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":170271,"byte_end":170280,"line_start":318,"line_end":318,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5079,"byte_end":5083,"line_start":129,"line_end":129,"column_start":9,"column_end":13},"name":"read","qualname":"::read","value":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751}],"decl_id":null,"docs":" Types which operate over [`Read`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":5579,"byte_end":5584,"line_start":143,"line_end":143,"column_start":9,"column_end":14},"name":"write","qualname":"::write","value":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758}],"decl_id":null,"docs":" Types which operate over [`Write`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":6047,"byte_end":6054,"line_start":156,"line_end":156,"column_start":9,"column_end":16},"name":"bufread","qualname":"::bufread","value":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766}],"decl_id":null,"docs":" Types which operate over [`BufRead`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1121},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":7334,"byte_end":7345,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"Compression","qualname":"::Compression","value":"","parent":null,"children":[],"decl_id":null,"docs":" When compressing data, the compression level can be specified by a value in\n this enum.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":7633,"byte_end":7636,"line_start":195,"line_end":195,"column_start":12,"column_end":15},"name":"new","qualname":"<Compression>::new","value":"fn (level: u32) -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Creates a new description of the compression level with an explicitly\n specified integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":7817,"byte_end":7821,"line_start":201,"line_end":201,"column_start":12,"column_end":16},"name":"none","qualname":"<Compression>::none","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" No compression is to be performed, this may actually inflate data\n slightly when encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":7931,"byte_end":7935,"line_start":206,"line_end":206,"column_start":12,"column_end":16},"name":"fast","qualname":"<Compression>::fast","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the best speed of encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":8049,"byte_end":8053,"line_start":211,"line_end":211,"column_start":12,"column_end":16},"name":"best","qualname":"<Compression>::best","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the size of data being encoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":8213,"byte_end":8218,"line_start":217,"line_end":217,"column_start":12,"column_end":17},"name":"level","qualname":"<Compression>::level","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns an integer representing the compression level, typically on a\n scale of 0-9\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\bufreader.rs","byte_start":9173,"byte_end":9182,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\bufreader.rs","byte_start":9568,"byte_end":9577,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\bufreader.rs","byte_start":9904,"byte_end":9913,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\bufreader.rs","byte_start":10280,"byte_end":10289,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\bufreader.rs","byte_start":10830,"byte_end":10839,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":11777,"byte_end":11780,"line_start":26,"line_end":26,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":12798,"byte_end":12807,"line_start":65,"line_end":65,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":12982,"byte_end":12991,"line_start":75,"line_end":75,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":13628,"byte_end":13637,"line_start":102,"line_end":102,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":13841,"byte_end":13850,"line_start":110,"line_end":110,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":14336,"byte_end":14345,"line_start":131,"line_end":131,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":14974,"byte_end":14983,"line_start":158,"line_end":158,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":15175,"byte_end":15184,"line_start":168,"line_end":168,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":22901,"byte_end":22915,"line_start":50,"line_end":50,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":23324,"byte_end":23338,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":24903,"byte_end":24917,"line_start":113,"line_end":113,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":25174,"byte_end":25188,"line_start":122,"line_end":122,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":26824,"byte_end":26838,"line_start":180,"line_end":180,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":27095,"byte_end":27109,"line_start":191,"line_end":191,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":28814,"byte_end":28828,"line_start":244,"line_end":244,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":29087,"byte_end":29101,"line_start":253,"line_end":253,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":30695,"byte_end":30709,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":31039,"byte_end":31053,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":33055,"byte_end":33069,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":33288,"byte_end":33302,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":34837,"byte_end":34851,"line_start":172,"line_end":172,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":35468,"byte_end":35482,"line_start":190,"line_end":190,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":37377,"byte_end":37391,"line_start":242,"line_end":242,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":37612,"byte_end":37626,"line_start":251,"line_end":251,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":38982,"byte_end":38996,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":43636,"byte_end":43650,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":44075,"byte_end":44089,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":45565,"byte_end":45579,"line_start":224,"line_end":224,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":49273,"byte_end":49287,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":49712,"byte_end":49726,"line_start":342,"line_end":342,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\rust.rs","byte_start":8659809,"byte_end":8659816,"line_start":33,"line_end":33,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\rust.rs","byte_start":8660085,"byte_end":8660092,"line_start":43,"line_end":43,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\rust.rs","byte_start":8661585,"byte_end":8661592,"line_start":93,"line_end":93,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\rust.rs","byte_start":8661865,"byte_end":8661872,"line_start":111,"line_end":111,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\rust.rs","byte_start":8662141,"byte_end":8662148,"line_start":121,"line_end":121,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\rust.rs","byte_start":8663735,"byte_end":8663742,"line_start":173,"line_end":173,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":67018,"byte_end":67027,"line_start":168,"line_end":168,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":68055,"byte_end":68064,"line_start":199,"line_end":199,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":69011,"byte_end":69020,"line_start":232,"line_end":232,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":69705,"byte_end":69714,"line_start":256,"line_end":256,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":71542,"byte_end":71548,"line_start":326,"line_end":326,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":71785,"byte_end":71791,"line_start":337,"line_end":337,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":72204,"byte_end":72213,"line_start":351,"line_end":351,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":73183,"byte_end":73192,"line_start":386,"line_end":386,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":73953,"byte_end":73962,"line_start":411,"line_end":411,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":78098,"byte_end":78107,"line_start":523,"line_end":523,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":80067,"byte_end":80081,"line_start":583,"line_end":583,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":80382,"byte_end":80396,"line_start":592,"line_end":592,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":81110,"byte_end":81124,"line_start":617,"line_end":617,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":81354,"byte_end":81368,"line_start":626,"line_end":626,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":83031,"byte_end":83040,"line_start":49,"line_end":49,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":83496,"byte_end":83505,"line_start":62,"line_end":62,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":84102,"byte_end":84111,"line_start":82,"line_end":82,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":84251,"byte_end":84260,"line_start":88,"line_end":88,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":85553,"byte_end":85562,"line_start":137,"line_end":137,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":85815,"byte_end":85824,"line_start":147,"line_end":147,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":86579,"byte_end":86588,"line_start":172,"line_end":172,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":86804,"byte_end":86813,"line_start":181,"line_end":181,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":88801,"byte_end":88815,"line_start":243,"line_end":243,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":89165,"byte_end":89179,"line_start":254,"line_end":254,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":89940,"byte_end":89954,"line_start":279,"line_end":279,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":90175,"byte_end":90189,"line_start":288,"line_end":288,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":410},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":91956,"byte_end":91965,"line_start":55,"line_end":55,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":95165,"byte_end":95174,"line_start":145,"line_end":145,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":95800,"byte_end":95809,"line_start":169,"line_end":169,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":96032,"byte_end":96041,"line_start":178,"line_end":178,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":97483,"byte_end":97492,"line_start":228,"line_end":228,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":100986,"byte_end":100993,"line_start":330,"line_end":330,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":101177,"byte_end":101186,"line_start":338,"line_end":338,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":103095,"byte_end":103104,"line_start":396,"line_end":396,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":51906,"byte_end":51914,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":54935,"byte_end":54944,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":111347,"byte_end":111362,"line_start":127,"line_end":127,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":113256,"byte_end":113264,"line_start":183,"line_end":183,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":118845,"byte_end":118855,"line_start":330,"line_end":330,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":124473,"byte_end":124488,"line_start":473,"line_end":473,"column_start":16,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":124528,"byte_end":124533,"line_start":475,"line_end":475,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":124668,"byte_end":124683,"line_start":481,"line_end":481,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":124818,"byte_end":124831,"line_start":487,"line_end":487,"column_start":16,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":124869,"byte_end":124874,"line_start":489,"line_end":489,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":125007,"byte_end":125020,"line_start":495,"line_end":495,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":131248,"byte_end":131256,"line_start":32,"line_end":32,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":131876,"byte_end":131886,"line_start":58,"line_end":58,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":132584,"byte_end":132597,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":132798,"byte_end":132813,"line_start":104,"line_end":104,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":134409,"byte_end":134415,"line_start":159,"line_end":159,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":137429,"byte_end":137435,"line_start":254,"line_end":254,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":138463,"byte_end":138469,"line_start":284,"line_end":284,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":144782,"byte_end":144793,"line_start":46,"line_end":46,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":145191,"byte_end":145202,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":146767,"byte_end":146778,"line_start":109,"line_end":109,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":147032,"byte_end":147043,"line_start":118,"line_end":118,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":148548,"byte_end":148559,"line_start":174,"line_end":174,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":148909,"byte_end":148920,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":150378,"byte_end":150389,"line_start":234,"line_end":234,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":150645,"byte_end":150656,"line_start":243,"line_end":243,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":152124,"byte_end":152135,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":152456,"byte_end":152467,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":154469,"byte_end":154480,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":154696,"byte_end":154707,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":156203,"byte_end":156214,"line_start":171,"line_end":171,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":156831,"byte_end":156842,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":158737,"byte_end":158748,"line_start":241,"line_end":241,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":158966,"byte_end":158977,"line_start":250,"line_end":250,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":160348,"byte_end":160359,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":164929,"byte_end":164940,"line_start":159,"line_end":159,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":165354,"byte_end":165365,"line_start":177,"line_end":177,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":166801,"byte_end":166812,"line_start":226,"line_end":226,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":170367,"byte_end":170378,"line_start":323,"line_end":323,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":170800,"byte_end":170811,"line_start":341,"line_end":341,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":7358,"byte_end":7369,"line_start":189,"line_end":189,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":8276,"byte_end":8287,"line_start":222,"line_end":222,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\bufreader.rs","byte_start":9173,"byte_end":9182,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":23},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\bufreader.rs","byte_start":9568,"byte_end":9577,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":23},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\bufreader.rs","byte_start":9904,"byte_end":9913,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":23},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\bufreader.rs","byte_start":10280,"byte_end":10289,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":23},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\bufreader.rs","byte_start":10830,"byte_end":10839,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":23},"to":{"krate":1,"index":2901}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":11777,"byte_end":11780,"line_start":26,"line_end":26,"column_start":6,"column_end":9},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":12798,"byte_end":12807,"line_start":65,"line_end":65,"column_start":15,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":783},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":12982,"byte_end":12991,"line_start":75,"line_end":75,"column_start":9,"column_end":18},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":783},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":13628,"byte_end":13637,"line_start":102,"line_end":102,"column_start":24,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":783},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":13841,"byte_end":13850,"line_start":110,"line_end":110,"column_start":30,"column_end":39},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":783},"to":{"krate":1,"index":2901}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":14336,"byte_end":14345,"line_start":131,"line_end":131,"column_start":9,"column_end":18},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":14974,"byte_end":14983,"line_start":158,"line_end":158,"column_start":16,"column_end":25},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\crc.rs","byte_start":15175,"byte_end":15184,"line_start":168,"line_end":168,"column_start":26,"column_end":35},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":790},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":22901,"byte_end":22915,"line_start":50,"line_end":50,"column_start":18,"column_end":32},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":797},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":23324,"byte_end":23338,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":797},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":24903,"byte_end":24917,"line_start":113,"line_end":113,"column_start":27,"column_end":41},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":797},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":25174,"byte_end":25188,"line_start":122,"line_end":122,"column_start":36,"column_end":50},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":797},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":26824,"byte_end":26838,"line_start":180,"line_end":180,"column_start":18,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":27095,"byte_end":27109,"line_start":191,"line_end":191,"column_start":9,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":28814,"byte_end":28828,"line_start":244,"line_end":244,"column_start":27,"column_end":41},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":804},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\bufread.rs","byte_start":29087,"byte_end":29101,"line_start":253,"line_end":253,"column_start":36,"column_end":50},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":804},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":30695,"byte_end":30709,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":31039,"byte_end":31053,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":33055,"byte_end":33069,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":811},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":33288,"byte_end":33302,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":811},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":34837,"byte_end":34851,"line_start":172,"line_end":172,"column_start":15,"column_end":29},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":35468,"byte_end":35482,"line_start":190,"line_end":190,"column_start":9,"column_end":23},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":37377,"byte_end":37391,"line_start":242,"line_end":242,"column_start":24,"column_end":38},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":817},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\read.rs","byte_start":37612,"byte_end":37626,"line_start":251,"line_end":251,"column_start":33,"column_end":47},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":817},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":38982,"byte_end":38996,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":823},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":43636,"byte_end":43650,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":823},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":44075,"byte_end":44089,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":823},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":45565,"byte_end":45579,"line_start":224,"line_end":224,"column_start":16,"column_end":30},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":49273,"byte_end":49287,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\deflate\\write.rs","byte_start":49712,"byte_end":49726,"line_start":342,"line_end":342,"column_start":32,"column_end":46},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\mod.rs","byte_start":50268,"byte_end":50272,"line_start":10,"line_end":10,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1545},"to":{"krate":0,"index":233}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\mod.rs","byte_start":50275,"byte_end":50279,"line_start":10,"line_end":10,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1533},"to":{"krate":0,"index":233}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\mod.rs","byte_start":50374,"byte_end":50381,"line_start":15,"line_end":15,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":233},"to":{"krate":0,"index":236}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\mod.rs","byte_start":50675,"byte_end":50682,"line_start":26,"line_end":26,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":233},"to":{"krate":0,"index":240}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\rust.rs","byte_start":8659809,"byte_end":8659816,"line_start":33,"line_end":33,"column_start":21,"column_end":28},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":849},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\rust.rs","byte_start":8660085,"byte_end":8660092,"line_start":43,"line_end":43,"column_start":25,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":849},"to":{"krate":0,"index":236}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\rust.rs","byte_start":8661585,"byte_end":8661592,"line_start":93,"line_end":93,"column_start":18,"column_end":25},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":849},"to":{"krate":0,"index":233}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\rust.rs","byte_start":8661865,"byte_end":8661872,"line_start":111,"line_end":111,"column_start":21,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":862},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\rust.rs","byte_start":8662141,"byte_end":8662148,"line_start":121,"line_end":121,"column_start":25,"column_end":32},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":862},"to":{"krate":0,"index":240}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\ffi\\rust.rs","byte_start":8663735,"byte_end":8663742,"line_start":173,"line_end":173,"column_start":18,"column_end":25},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":862},"to":{"krate":0,"index":233}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":67018,"byte_end":67027,"line_start":168,"line_end":168,"column_start":18,"column_end":27},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":876},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":68055,"byte_end":68064,"line_start":199,"line_end":199,"column_start":9,"column_end":18},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":876},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":69011,"byte_end":69020,"line_start":232,"line_end":232,"column_start":27,"column_end":36},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":876},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":69705,"byte_end":69714,"line_start":256,"line_end":256,"column_start":36,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":876},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":71542,"byte_end":71548,"line_start":326,"line_end":326,"column_start":13,"column_end":19},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":299},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":71785,"byte_end":71791,"line_start":337,"line_end":337,"column_start":28,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":299},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":72204,"byte_end":72213,"line_start":351,"line_end":351,"column_start":18,"column_end":27},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":885},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":73183,"byte_end":73192,"line_start":386,"line_end":386,"column_start":9,"column_end":18},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":885},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":73953,"byte_end":73962,"line_start":411,"line_end":411,"column_start":27,"column_end":36},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":885},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":78098,"byte_end":78107,"line_start":523,"line_end":523,"column_start":36,"column_end":45},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":885},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":80067,"byte_end":80081,"line_start":583,"line_end":583,"column_start":18,"column_end":32},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":80382,"byte_end":80396,"line_start":592,"line_end":592,"column_start":9,"column_end":23},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":81110,"byte_end":81124,"line_start":617,"line_end":617,"column_start":27,"column_end":41},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":912},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\bufread.rs","byte_start":81354,"byte_end":81368,"line_start":626,"line_end":626,"column_start":36,"column_end":50},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":912},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":83031,"byte_end":83040,"line_start":49,"line_end":49,"column_start":15,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":919},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":83496,"byte_end":83505,"line_start":62,"line_end":62,"column_start":9,"column_end":18},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":919},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":84102,"byte_end":84111,"line_start":82,"line_end":82,"column_start":24,"column_end":33},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":919},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":84251,"byte_end":84260,"line_start":88,"line_end":88,"column_start":33,"column_end":42},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":919},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":85553,"byte_end":85562,"line_start":137,"line_end":137,"column_start":15,"column_end":24},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":925},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":85815,"byte_end":85824,"line_start":147,"line_end":147,"column_start":9,"column_end":18},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":925},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":86579,"byte_end":86588,"line_start":172,"line_end":172,"column_start":24,"column_end":33},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":86804,"byte_end":86813,"line_start":181,"line_end":181,"column_start":33,"column_end":42},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":88801,"byte_end":88815,"line_start":243,"line_end":243,"column_start":15,"column_end":29},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":931},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":89165,"byte_end":89179,"line_start":254,"line_end":254,"column_start":9,"column_end":23},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":931},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":89940,"byte_end":89954,"line_start":279,"line_end":279,"column_start":24,"column_end":38},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":931},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\read.rs","byte_start":90175,"byte_end":90189,"line_start":288,"line_end":288,"column_start":33,"column_end":47},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":931},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":91956,"byte_end":91965,"line_start":55,"line_end":55,"column_start":16,"column_end":25},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":937},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":95165,"byte_end":95174,"line_start":145,"line_end":145,"column_start":26,"column_end":35},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":937},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":95800,"byte_end":95809,"line_start":169,"line_end":169,"column_start":32,"column_end":41},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":937},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":96032,"byte_end":96041,"line_start":178,"line_end":178,"column_start":25,"column_end":34},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":937},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":97483,"byte_end":97492,"line_start":228,"line_end":228,"column_start":16,"column_end":25},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":946},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":100986,"byte_end":100993,"line_start":330,"line_end":330,"column_start":24,"column_end":31},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":461},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":101177,"byte_end":101186,"line_start":338,"line_end":338,"column_start":26,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":946},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\write.rs","byte_start":103095,"byte_end":103104,"line_start":396,"line_end":396,"column_start":32,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":946},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":51906,"byte_end":51914,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":955},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\gz\\mod.rs","byte_start":54935,"byte_end":54944,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":971},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":111347,"byte_end":111362,"line_start":127,"line_end":127,"column_start":6,"column_end":21},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1045},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":113256,"byte_end":113264,"line_start":183,"line_end":183,"column_start":6,"column_end":14},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":979},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":118845,"byte_end":118855,"line_start":330,"line_end":330,"column_start":6,"column_end":16},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":124473,"byte_end":124488,"line_start":473,"line_end":473,"column_start":16,"column_end":31},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1045},"to":{"krate":1,"index":1592}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":124528,"byte_end":124533,"line_start":475,"line_end":475,"column_start":36,"column_end":41},"kind":{"Impl":{"id":81}},"from":{"krate":1,"index":2445},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":124668,"byte_end":124683,"line_start":481,"line_end":481,"column_start":23,"column_end":38},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1045},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":124818,"byte_end":124831,"line_start":487,"line_end":487,"column_start":16,"column_end":29},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1050},"to":{"krate":1,"index":1592}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":124869,"byte_end":124874,"line_start":489,"line_end":489,"column_start":34,"column_end":39},"kind":{"Impl":{"id":84}},"from":{"krate":1,"index":2445},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\mem.rs","byte_start":125007,"byte_end":125020,"line_start":495,"line_end":495,"column_start":23,"column_end":36},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":131248,"byte_end":131256,"line_start":32,"line_end":32,"column_start":14,"column_end":22},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":979},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":131876,"byte_end":131886,"line_start":58,"line_end":58,"column_start":14,"column_end":24},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":983},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":132584,"byte_end":132597,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":987},"to":{"krate":0,"index":574}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":132798,"byte_end":132813,"line_start":104,"line_end":104,"column_start":16,"column_end":31},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1016},"to":{"krate":0,"index":574}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":134409,"byte_end":134415,"line_start":159,"line_end":159,"column_start":24,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1073},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":137429,"byte_end":137435,"line_start":254,"line_end":254,"column_start":34,"column_end":40},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1073},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zio.rs","byte_start":138463,"byte_end":138469,"line_start":284,"line_end":284,"column_start":33,"column_end":39},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1073},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":144782,"byte_end":144793,"line_start":46,"line_end":46,"column_start":18,"column_end":29},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1083},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":145191,"byte_end":145202,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1083},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":146767,"byte_end":146778,"line_start":109,"line_end":109,"column_start":27,"column_end":38},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1083},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":147032,"byte_end":147043,"line_start":118,"line_end":118,"column_start":36,"column_end":47},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1083},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":148548,"byte_end":148559,"line_start":174,"line_end":174,"column_start":18,"column_end":29},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":148909,"byte_end":148920,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":150378,"byte_end":150389,"line_start":234,"line_end":234,"column_start":27,"column_end":38},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1090},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\bufread.rs","byte_start":150645,"byte_end":150656,"line_start":243,"line_end":243,"column_start":36,"column_end":47},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1090},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":152124,"byte_end":152135,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":152456,"byte_end":152467,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":154469,"byte_end":154480,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1097},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":154696,"byte_end":154707,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1097},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":156203,"byte_end":156214,"line_start":171,"line_end":171,"column_start":15,"column_end":26},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":156831,"byte_end":156842,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":158737,"byte_end":158748,"line_start":241,"line_end":241,"column_start":24,"column_end":35},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1103},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\read.rs","byte_start":158966,"byte_end":158977,"line_start":250,"line_end":250,"column_start":33,"column_end":44},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1103},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":160348,"byte_end":160359,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":164929,"byte_end":164940,"line_start":159,"line_end":159,"column_start":26,"column_end":37},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1109},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":165354,"byte_end":165365,"line_start":177,"line_end":177,"column_start":32,"column_end":43},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1109},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":166801,"byte_end":166812,"line_start":226,"line_end":226,"column_start":16,"column_end":27},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":170367,"byte_end":170378,"line_start":323,"line_end":323,"column_start":26,"column_end":37},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1115},"to":{"krate":1,"index":2879}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\zlib\\write.rs","byte_start":170800,"byte_end":170811,"line_start":341,"line_end":341,"column_start":32,"column_end":43},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1115},"to":{"krate":1,"index":2825}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":7358,"byte_end":7369,"line_start":189,"line_end":189,"column_start":6,"column_end":17},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.16\\src\\lib.rs","byte_start":8276,"byte_end":8287,"line_start":222,"line_end":222,"column_start":18,"column_end":29},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1121},"to":{"krate":2,"index":2206}}]}