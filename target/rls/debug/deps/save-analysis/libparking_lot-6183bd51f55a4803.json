{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0","program":"C:\\Users\\Beni\\.rustup\\toolchains\\stable-i686-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","parking_lot","C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=6183bd51f55a4803","-C","extra-filename=-6183bd51f55a4803","--out-dir","c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps","--extern","instant=c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps\\libinstant-ad18c53c306f35e6.rmeta","--extern","lock_api=c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps\\liblock_api-716fa3b14075e15e.rmeta","--extern","parking_lot_core=c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps\\libparking_lot_core-c40bea9ee5a8fc39.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Beni\\.rustup/toolchains/stable-i686-pc-windows-msvc"],"output":"c:\\Users\\Beni\\Documents\\work\\Testing\\test_logger\\target\\rls\\debug\\deps\\libparking_lot-6183bd51f55a4803.rmeta"},"prelude":{"crate_id":{"name":"parking_lot","disambiguator":[5120692394834014165,12296369470834650738]},"crate_root":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src","external_crates":[{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[17547299525433066937,6462703543472652821]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","num":2,"id":{"name":"core","disambiguator":[6764811272097449003,13681722573116367099]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9485826678459717252,15756974541460141494]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15954912595519161470,12922162993496933985]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5824572747488578400,18164785604033351576]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[10331641369357162511,17836984904787579268]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8495357030570666042,9830701870303456689]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9657771536831955996,2892192969278695320]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[12375917788909833983,1997691704544372736]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[16952125311933509182,18402636855086965869]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[10744862195025581238,6478452609884575256]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8143783028888645125,5443838079021418384]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[2060411395260400816,11913745625441100273]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","num":14,"id":{"name":"instant","disambiguator":[9257303064337279640,5296747312984726953]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","num":15,"id":{"name":"lock_api","disambiguator":[16471060131445902322,10907645298118286217]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","num":16,"id":{"name":"scopeguard","disambiguator":[5817666571418040635,9298999605435454000]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","num":17,"id":{"name":"parking_lot_core","disambiguator":[7535326438263032610,18305298703572050171]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","num":18,"id":{"name":"cfg_if","disambiguator":[12264963404521768264,13162333806926070749]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","num":19,"id":{"name":"smallvec","disambiguator":[14821153376232677519,3249725217253689871]}},{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","num":20,"id":{"name":"winapi","disambiguator":[1148587688082618013,10390933832460059367]}}],"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":333,"byte_end":2029,"line_start":8,"line_end":57,"column_start":1,"column_end":20}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1356,"byte_end":1363,"line_start":42,"line_end":42,"column_start":25,"column_end":32},"alias_span":null,"name":"Condvar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1365,"byte_end":1382,"line_start":42,"line_end":42,"column_start":34,"column_end":51},"alias_span":null,"name":"WaitTimeoutResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1412,"byte_end":1428,"line_start":43,"line_end":43,"column_start":28,"column_end":44},"alias_span":null,"name":"const_fair_mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1430,"byte_end":1439,"line_start":43,"line_end":43,"column_start":46,"column_end":55},"alias_span":null,"name":"FairMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1441,"byte_end":1455,"line_start":43,"line_end":43,"column_start":57,"column_end":71},"alias_span":null,"name":"FairMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1457,"byte_end":1477,"line_start":43,"line_end":43,"column_start":73,"column_end":93},"alias_span":null,"name":"MappedFairMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1502,"byte_end":1513,"line_start":44,"line_end":44,"column_start":23,"column_end":34},"alias_span":null,"name":"const_mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1515,"byte_end":1531,"line_start":44,"line_end":44,"column_start":36,"column_end":52},"alias_span":null,"name":"MappedMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1533,"byte_end":1538,"line_start":44,"line_end":44,"column_start":54,"column_end":59},"alias_span":null,"name":"Mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1540,"byte_end":1550,"line_start":44,"line_end":44,"column_start":61,"column_end":71},"alias_span":null,"name":"MutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1574,"byte_end":1578,"line_start":45,"line_end":45,"column_start":22,"column_end":26},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1580,"byte_end":1589,"line_start":45,"line_end":45,"column_start":28,"column_end":37},"alias_span":null,"name":"OnceState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1622,"byte_end":1634,"line_start":46,"line_end":46,"column_start":31,"column_end":43},"alias_span":null,"name":"RawFairMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1661,"byte_end":1669,"line_start":47,"line_end":47,"column_start":26,"column_end":34},"alias_span":null,"name":"RawMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1697,"byte_end":1706,"line_start":48,"line_end":48,"column_start":27,"column_end":36},"alias_span":null,"name":"RawRwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":351},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1737,"byte_end":1758,"line_start":50,"line_end":50,"column_start":5,"column_end":26},"alias_span":null,"name":"const_reentrant_mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":356},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1760,"byte_end":1785,"line_start":50,"line_end":50,"column_start":28,"column_end":53},"alias_span":null,"name":"MappedReentrantMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1787,"byte_end":1798,"line_start":50,"line_end":50,"column_start":55,"column_end":66},"alias_span":null,"name":"RawThreadId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1800,"byte_end":1814,"line_start":50,"line_end":50,"column_start":68,"column_end":82},"alias_span":null,"name":"ReentrantMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":353},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1820,"byte_end":1839,"line_start":51,"line_end":51,"column_start":5,"column_end":24},"alias_span":null,"name":"ReentrantMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1872,"byte_end":1884,"line_start":54,"line_end":54,"column_start":5,"column_end":17},"alias_span":null,"name":"const_rwlock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1886,"byte_end":1907,"line_start":54,"line_end":54,"column_start":19,"column_end":40},"alias_span":null,"name":"MappedRwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1909,"byte_end":1931,"line_start":54,"line_end":54,"column_start":42,"column_end":64},"alias_span":null,"name":"MappedRwLockWriteGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1933,"byte_end":1939,"line_start":54,"line_end":54,"column_start":66,"column_end":72},"alias_span":null,"name":"RwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":366},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1941,"byte_end":1956,"line_start":54,"line_end":54,"column_start":74,"column_end":89},"alias_span":null,"name":"RwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1962,"byte_end":1987,"line_start":55,"line_end":55,"column_start":5,"column_end":30},"alias_span":null,"name":"RwLockUpgradableReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":1989,"byte_end":2005,"line_start":55,"line_end":55,"column_start":32,"column_end":48},"alias_span":null,"name":"RwLockWriteGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":0},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":2020,"byte_end":2028,"line_start":57,"line_end":57,"column_start":11,"column_end":19},"alias_span":null,"name":"lock_api","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":333,"byte_end":2029,"line_start":8,"line_end":57,"column_start":1,"column_end":20},"name":"","qualname":"::","value":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":55},{"krate":0,"index":66},{"krate":0,"index":79},{"krate":0,"index":92},{"krate":0,"index":140},{"krate":0,"index":161},{"krate":0,"index":210},{"krate":0,"index":337},{"krate":0,"index":359},{"krate":0,"index":381},{"krate":0,"index":392},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":400},{"krate":0,"index":405},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":422},{"krate":0,"index":430}],"decl_id":null,"docs":" This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n `Once` that are smaller, faster and more flexible than those in the Rust\n standard library. It also provides a `ReentrantMutex` type.\n","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":553,"byte_end":575,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\lib.rs","byte_start":576,"byte_end":602,"line_start":13,"line_end":13,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":2890,"byte_end":2907,"line_start":23,"line_end":23,"column_start":12,"column_end":29},"name":"WaitTimeoutResult","qualname":"::condvar::WaitTimeoutResult","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type indicating whether a timed wait on a condition variable returned\n due to a time out or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":3028,"byte_end":3037,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"name":"timed_out","qualname":"<WaitTimeoutResult>::timed_out","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the wait was known to have timed out.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":3007,"byte_end":3016,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":5432,"byte_end":5439,"line_start":90,"line_end":90,"column_start":12,"column_end":19},"name":"Condvar","qualname":"::condvar::Condvar","value":"Condvar {  }","parent":null,"children":[{"krate":0,"index":30}],"decl_id":null,"docs":" A Condition Variable","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":5617,"byte_end":5620,"line_start":98,"line_end":98,"column_start":18,"column_end":21},"name":"new","qualname":"<Condvar>::new","value":"fn () -> Condvar","parent":null,"children":[],"decl_id":null,"docs":" Creates a new condition variable which is ready to be waited on and\n notified.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":5590,"byte_end":5599,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":6446,"byte_end":6456,"line_start":128,"line_end":128,"column_start":12,"column_end":22},"name":"notify_one","qualname":"<Condvar>::notify_one","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Wakes up one blocked thread on this condvar.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":6425,"byte_end":6434,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":8909,"byte_end":8919,"line_start":189,"line_end":189,"column_start":12,"column_end":22},"name":"notify_all","qualname":"<Condvar>::notify_all","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Wakes up all blocked threads on this condvar.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":8888,"byte_end":8897,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":11932,"byte_end":11936,"line_start":259,"line_end":259,"column_start":12,"column_end":16},"name":"wait","qualname":"<Condvar>::wait","value":"fn <T> (&self, mutex_guard: &mut MutexGuard<'_, T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Blocks the current thread until this condition variable receives a\n notification.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":11911,"byte_end":11920,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":13211,"byte_end":13221,"line_start":287,"line_end":287,"column_start":12,"column_end":22},"name":"wait_until","qualname":"<Condvar>::wait_until","value":"fn <T> (&self, mutex_guard: &mut MutexGuard<'_, T>, timeout: Instant) -> WaitTimeoutResult","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after\n the specified time instant.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":13190,"byte_end":13199,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":17615,"byte_end":17623,"line_start":391,"line_end":391,"column_start":12,"column_end":20},"name":"wait_for","qualname":"<Condvar>::wait_for","value":"fn <T> (&self, mutex_guard: &mut MutexGuard<'_, T>, timeout: Duration) -> WaitTimeoutResult","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after a\n specified duration.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":17594,"byte_end":17603,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\elision.rs","byte_start":37727,"byte_end":37734,"line_start":12,"line_end":12,"column_start":10,"column_end":17},"name":"IntType","qualname":"::elision::AtomicElisionExt::IntType","value":"type IntType;","parent":{"krate":0,"index":57},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\fair_mutex.rs","byte_start":44486,"byte_end":44495,"line_start":81,"line_end":81,"column_start":10,"column_end":19},"name":"FairMutex","qualname":"::fair_mutex::FairMutex","value":"lock_api::Mutex<RawFairMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutual exclusive primitive that is always fair, useful for protecting shared data","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\fair_mutex.rs","byte_start":44694,"byte_end":44710,"line_start":86,"line_end":86,"column_start":14,"column_end":30},"name":"const_fair_mutex","qualname":"::fair_mutex::const_fair_mutex","value":"fn <T> (val: T) -> FairMutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new fair mutex in an unlocked state ready for use.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\fair_mutex.rs","byte_start":45095,"byte_end":45109,"line_start":95,"line_end":95,"column_start":10,"column_end":24},"name":"FairMutexGuard","qualname":"::fair_mutex::FairMutexGuard","value":"lock_api::MutexGuard<'a, RawFairMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\fair_mutex.rs","byte_start":45549,"byte_end":45569,"line_start":104,"line_end":104,"column_start":10,"column_end":30},"name":"MappedFairMutexGuard","qualname":"::fair_mutex::MappedFairMutexGuard","value":"lock_api::MappedMutexGuard<'a, RawFairMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\mutex.rs","byte_start":53864,"byte_end":53869,"line_start":87,"line_end":87,"column_start":10,"column_end":15},"name":"Mutex","qualname":"::mutex::Mutex","value":"lock_api::Mutex<RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\mutex.rs","byte_start":54054,"byte_end":54065,"line_start":92,"line_end":92,"column_start":14,"column_end":25},"name":"const_mutex","qualname":"::mutex::const_mutex","value":"fn <T> (val: T) -> Mutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\mutex.rs","byte_start":54438,"byte_end":54448,"line_start":101,"line_end":101,"column_start":10,"column_end":20},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"lock_api::MutexGuard<'a, RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\mutex.rs","byte_start":54872,"byte_end":54888,"line_start":110,"line_end":110,"column_start":10,"column_end":26},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"lock_api::MappedMutexGuard<'a, RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":60972,"byte_end":60975,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"New","qualname":"::once::OnceState::New","value":"OnceState::New","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" A closure has not been executed yet\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":61027,"byte_end":61035,"line_start":27,"line_end":27,"column_start":5,"column_end":13},"name":"Poisoned","qualname":"::once::OnceState::Poisoned","value":"OnceState::Poisoned","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" A closure was executed but panicked.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":61093,"byte_end":61103,"line_start":30,"line_end":30,"column_start":5,"column_end":15},"name":"InProgress","qualname":"::once::OnceState::InProgress","value":"OnceState::InProgress","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" A thread is currently executing a closure.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":61156,"byte_end":61160,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Done","qualname":"::once::OnceState::Done","value":"OnceState::Done","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" A closure has completed successfully.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":60912,"byte_end":60921,"line_start":22,"line_end":22,"column_start":10,"column_end":19},"name":"OnceState","qualname":"::once::OnceState","value":"OnceState::{New, Poisoned, InProgress, Done}","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":451},{"krate":0,"index":453}],"decl_id":null,"docs":" Current state of a `Once`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":61440,"byte_end":61448,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"poisoned","qualname":"<OnceState>::poisoned","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the associated `Once` has been poisoned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":61419,"byte_end":61428,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":61684,"byte_end":61688,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"done","qualname":"<OnceState>::done","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the associated `Once` has successfully executed a\n closure.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":61663,"byte_end":61672,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":62509,"byte_end":62513,"line_start":83,"line_end":83,"column_start":12,"column_end":16},"name":"Once","qualname":"::once::Once","value":"","parent":null,"children":[],"decl_id":null,"docs":" A synchronization primitive which can be used to run a one-time\n initialization. Useful for one-time initialization for globals, FFI or\n related functionality.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":62605,"byte_end":62608,"line_start":88,"line_end":88,"column_start":18,"column_end":21},"name":"new","qualname":"<Once>::new","value":"fn () -> Once","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Once` value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":62578,"byte_end":62587,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":62734,"byte_end":62739,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"state","qualname":"<Once>::state","value":"fn (&self) -> OnceState","parent":null,"children":[],"decl_id":null,"docs":" Returns the current state of this `Once`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":62713,"byte_end":62722,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":65012,"byte_end":65021,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"call_once","qualname":"<Once>::call_once","value":"fn <F> (&self, f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs an initialization routine once and only once. The given closure\n will be executed if this is the first time `call_once` has been called,\n and otherwise the routine will *not* be invoked.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":64991,"byte_end":65000,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":65772,"byte_end":65787,"line_start":179,"line_end":179,"column_start":12,"column_end":27},"name":"call_once_force","qualname":"<Once>::call_once_force","value":"fn <F> (&self, f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the same function as `call_once` except ignores poisoning.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":65751,"byte_end":65760,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_fair_mutex.rs","byte_start":74586,"byte_end":74598,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"RawFairMutex","qualname":"::raw_fair_mutex::RawFairMutex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Raw fair mutex type backed by the parking lot.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_mutex.rs","byte_start":77140,"byte_end":77148,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"RawMutex","qualname":"::raw_mutex::RawMutex","value":"RawMutex {  }","parent":null,"children":[{"krate":0,"index":184}],"decl_id":null,"docs":" Raw mutex type backed by the parking lot.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":90131,"byte_end":90140,"line_start":56,"line_end":56,"column_start":12,"column_end":21},"name":"RawRwLock","qualname":"::raw_rwlock::RawRwLock","value":"RawRwLock {  }","parent":null,"children":[{"krate":0,"index":247}],"decl_id":null,"docs":" Raw reader-writer lock type backed by the parking lot.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\remutex.rs","byte_start":126110,"byte_end":126121,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"RawThreadId","qualname":"::remutex::RawThreadId","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\remutex.rs","byte_start":127192,"byte_end":127206,"line_start":41,"line_end":41,"column_start":10,"column_end":24},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"lock_api::ReentrantMutex<RawMutex, RawThreadId, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":351},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\remutex.rs","byte_start":127433,"byte_end":127454,"line_start":46,"line_end":46,"column_start":14,"column_end":35},"name":"const_reentrant_mutex","qualname":"::remutex::const_reentrant_mutex","value":"fn <T> (val: T) -> ReentrantMutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":353},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\remutex.rs","byte_start":127916,"byte_end":127935,"line_start":59,"line_end":59,"column_start":10,"column_end":29},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"lock_api::ReentrantMutexGuard<'a, RawMutex, RawThreadId, T>","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":356},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\remutex.rs","byte_start":128408,"byte_end":128433,"line_start":68,"line_end":68,"column_start":10,"column_end":35},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"lock_api::MappedReentrantMutexGuard<'a, RawMutex, RawThreadId, T>","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\rwlock.rs","byte_start":134490,"byte_end":134496,"line_start":89,"line_end":89,"column_start":10,"column_end":16},"name":"RwLock","qualname":"::rwlock::RwLock","value":"lock_api::RwLock<RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\rwlock.rs","byte_start":134693,"byte_end":134705,"line_start":94,"line_end":94,"column_start":14,"column_end":26},"name":"const_rwlock","qualname":"::rwlock::const_rwlock","value":"fn <T> (val: T) -> RwLock<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":366},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\rwlock.rs","byte_start":134899,"byte_end":134914,"line_start":100,"line_end":100,"column_start":10,"column_end":25},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"lock_api::RwLockReadGuard<'a, RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\rwlock.rs","byte_start":135069,"byte_end":135085,"line_start":104,"line_end":104,"column_start":10,"column_end":26},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"lock_api::RwLockWriteGuard<'a, RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\rwlock.rs","byte_start":135535,"byte_end":135556,"line_start":113,"line_end":113,"column_start":10,"column_end":31},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"lock_api::MappedRwLockReadGuard<'a, RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\rwlock.rs","byte_start":136015,"byte_end":136037,"line_start":122,"line_end":122,"column_start":10,"column_end":32},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"lock_api::MappedRwLockWriteGuard<'a, RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\rwlock.rs","byte_start":136199,"byte_end":136224,"line_start":126,"line_end":126,"column_start":10,"column_end":35},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"lock_api::RwLockUpgradableReadGuard<'a, RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":2921,"byte_end":2938,"line_start":25,"line_end":25,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":5482,"byte_end":5489,"line_start":94,"line_end":94,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":17921,"byte_end":17928,"line_start":401,"line_end":401,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":18027,"byte_end":18034,"line_start":408,"line_end":408,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\elision.rs","byte_start":38515,"byte_end":38526,"line_start":37,"line_end":37,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":61170,"byte_end":61179,"line_start":36,"line_end":36,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":62531,"byte_end":62535,"line_start":85,"line_end":85,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":69626,"byte_end":69636,"line_start":282,"line_end":282,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":70878,"byte_end":70882,"line_start":318,"line_end":318,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":70975,"byte_end":70979,"line_start":325,"line_end":325,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_fair_mutex.rs","byte_start":74646,"byte_end":74658,"line_start":14,"line_end":14,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_fair_mutex.rs","byte_start":75155,"byte_end":75167,"line_start":40,"line_end":40,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_fair_mutex.rs","byte_start":75368,"byte_end":75380,"line_start":52,"line_end":52,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_mutex.rs","byte_start":78971,"byte_end":78979,"line_start":58,"line_end":58,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_mutex.rs","byte_start":80566,"byte_end":80574,"line_start":119,"line_end":119,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_mutex.rs","byte_start":81104,"byte_end":81112,"line_start":141,"line_end":141,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_mutex.rs","byte_start":82103,"byte_end":82111,"line_start":180,"line_end":180,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":207},{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":90206,"byte_end":90215,"line_start":60,"line_end":60,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":92470,"byte_end":92479,"line_start":149,"line_end":149,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":93412,"byte_end":93421,"line_start":186,"line_end":186,"column_start":46,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":93789,"byte_end":93798,"line_start":200,"line_end":200,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":95465,"byte_end":95474,"line_start":265,"line_end":265,"column_start":46,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":96072,"byte_end":96081,"line_start":289,"line_end":289,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":96823,"byte_end":96832,"line_start":317,"line_end":317,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":98735,"byte_end":98744,"line_start":392,"line_end":392,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":99593,"byte_end":99602,"line_start":422,"line_end":422,"column_start":53,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":100305,"byte_end":100314,"line_start":447,"line_end":447,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":101732,"byte_end":101741,"line_start":501,"line_end":501,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":325},{"krate":0,"index":330},{"krate":0,"index":335},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\remutex.rs","byte_start":126152,"byte_end":126163,"line_start":15,"line_end":15,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\util.rs","byte_start":149797,"byte_end":149803,"line_start":16,"line_end":16,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":2921,"byte_end":2938,"line_start":25,"line_end":25,"column_start":6,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":5482,"byte_end":5489,"line_start":94,"line_end":94,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":29},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":17921,"byte_end":17928,"line_start":401,"line_end":401,"column_start":18,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":29},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\condvar.rs","byte_start":18027,"byte_end":18034,"line_start":408,"line_end":408,"column_start":21,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":29},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\elision.rs","byte_start":38515,"byte_end":38526,"line_start":37,"line_end":37,"column_start":27,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":2,"index":28276},"to":{"krate":0,"index":57}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":61170,"byte_end":61179,"line_start":36,"line_end":36,"column_start":6,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":446},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":62531,"byte_end":62535,"line_start":85,"line_end":85,"column_start":6,"column_end":10},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":69626,"byte_end":69636,"line_start":282,"line_end":282,"column_start":27,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":70878,"byte_end":70882,"line_start":318,"line_end":318,"column_start":18,"column_end":22},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":113},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\once.rs","byte_start":70975,"byte_end":70979,"line_start":325,"line_end":325,"column_start":21,"column_end":25},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":113},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_fair_mutex.rs","byte_start":74646,"byte_end":74658,"line_start":14,"line_end":14,"column_start":36,"column_end":48},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":143},"to":{"krate":15,"index":19}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_fair_mutex.rs","byte_start":75155,"byte_end":75167,"line_start":40,"line_end":40,"column_start":40,"column_end":52},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":143},"to":{"krate":15,"index":26}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_fair_mutex.rs","byte_start":75368,"byte_end":75380,"line_start":52,"line_end":52,"column_start":41,"column_end":53},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":143},"to":{"krate":15,"index":29}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_mutex.rs","byte_start":78971,"byte_end":78979,"line_start":58,"line_end":58,"column_start":36,"column_end":44},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":183},"to":{"krate":15,"index":19}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_mutex.rs","byte_start":80566,"byte_end":80574,"line_start":119,"line_end":119,"column_start":40,"column_end":48},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":183},"to":{"krate":15,"index":26}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_mutex.rs","byte_start":81104,"byte_end":81112,"line_start":141,"line_end":141,"column_start":41,"column_end":49},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":183},"to":{"krate":15,"index":29}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_mutex.rs","byte_start":82103,"byte_end":82111,"line_start":180,"line_end":180,"column_start":6,"column_end":14},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":90206,"byte_end":90215,"line_start":60,"line_end":60,"column_start":37,"column_end":46},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":246},"to":{"krate":15,"index":458}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":92470,"byte_end":92479,"line_start":149,"line_end":149,"column_start":41,"column_end":50},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":246},"to":{"krate":15,"index":468}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":93412,"byte_end":93421,"line_start":186,"line_end":186,"column_start":46,"column_end":55},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":246},"to":{"krate":15,"index":473}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":93789,"byte_end":93798,"line_start":200,"line_end":200,"column_start":42,"column_end":51},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":246},"to":{"krate":15,"index":475}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":95465,"byte_end":95474,"line_start":265,"line_end":265,"column_start":46,"column_end":55},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":246},"to":{"krate":15,"index":482}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":96072,"byte_end":96081,"line_start":289,"line_end":289,"column_start":51,"column_end":60},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":246},"to":{"krate":15,"index":485}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":96823,"byte_end":96832,"line_start":317,"line_end":317,"column_start":44,"column_end":53},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":246},"to":{"krate":15,"index":488}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":98735,"byte_end":98744,"line_start":392,"line_end":392,"column_start":48,"column_end":57},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":246},"to":{"krate":15,"index":494}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":99593,"byte_end":99602,"line_start":422,"line_end":422,"column_start":53,"column_end":62},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":246},"to":{"krate":15,"index":497}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":100305,"byte_end":100314,"line_start":447,"line_end":447,"column_start":49,"column_end":58},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":246},"to":{"krate":15,"index":500}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\raw_rwlock.rs","byte_start":101732,"byte_end":101741,"line_start":501,"line_end":501,"column_start":6,"column_end":15},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\remutex.rs","byte_start":126152,"byte_end":126163,"line_start":15,"line_end":15,"column_start":29,"column_end":40},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":343},"to":{"krate":15,"index":225}},{"span":{"file_name":"C:\\Users\\Beni\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\parking_lot-0.11.0\\src\\util.rs","byte_start":149797,"byte_end":149803,"line_start":16,"line_end":16,"column_start":35,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":2,"index":29274},"to":{"krate":0,"index":384}}]}